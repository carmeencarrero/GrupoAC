// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `RGBDBus.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __RGBDBus_h__
#define __RGBDBus_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompRGBDBus
{

class RGBDBus;
class RGBDBusPrx;

}

namespace RoboCompRGBDBus
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    HardwareFailedException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

static HardwareFailedException _iceS_HardwareFailedException_init;

struct CameraParams
{
    int colorWidth;
    int colorHeight;
    int colorFPS;
    int depthWidth;
    int depthHeight;
    int depthFPS;
    float colorFocal;
    float depthFocal;
    ::std::string name;

    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const float&, const float&, const ::std::string&> ice_tuple() const
    {
        return std::tie(colorWidth, colorHeight, colorFPS, depthWidth, depthHeight, depthFPS, colorFocal, depthFocal, name);
    }
};

using CameraParamsMap = ::std::map<::std::string, ::RoboCompRGBDBus::CameraParams>;

using CameraList = ::std::vector<::std::string>;

using ColorBuffer = ::std::vector<::Ice::Byte>;

using DepthBuffer = ::std::vector<float>;

struct Image
{
    ::RoboCompRGBDBus::CameraParams camera;
    ::RoboCompRGBDBus::ColorBuffer colorImage;
    ::RoboCompRGBDBus::DepthBuffer depthImage;
    int width;
    int height;
    long long int colorTimestamp;
    long long int depthTimestamp;

    std::tuple<const ::RoboCompRGBDBus::CameraParams&, const ::RoboCompRGBDBus::ColorBuffer&, const ::RoboCompRGBDBus::DepthBuffer&, const int&, const int&, const long long int&, const long long int&> ice_tuple() const
    {
        return std::tie(camera, colorImage, depthImage, width, height, colorTimestamp, depthTimestamp);
    }
};

using ImageMap = ::std::map<::std::string, ::RoboCompRGBDBus::Image>;

struct Point3D
{
    ::Ice::Byte r;
    ::Ice::Byte g;
    ::Ice::Byte b;
    float x;
    float y;
    float z;

    std::tuple<const ::Ice::Byte&, const ::Ice::Byte&, const ::Ice::Byte&, const float&, const float&, const float&> ice_tuple() const
    {
        return std::tie(r, g, b, x, y, z);
    }
};

using PointCloud = ::std::vector<::RoboCompRGBDBus::Point3D>;

using PointCloudMap = ::std::map<::std::string, ::RoboCompRGBDBus::PointCloud>;

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompRGBDBus
{

class RGBDBus : public virtual ::Ice::Object
{
public:

    using ProxyType = RGBDBusPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Current&) = 0;
    bool _iceD_getAllCameraParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImages(::RoboCompRGBDBus::CameraList, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Current&) = 0;
    bool _iceD_getImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getPointClouds(::RoboCompRGBDBus::CameraList, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Current&) = 0;
    bool _iceD_getPointClouds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getProtoClouds(::RoboCompRGBDBus::CameraList, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Current&) = 0;
    bool _iceD_getProtoClouds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDecimatedImages(::RoboCompRGBDBus::CameraList, int, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Current&) = 0;
    bool _iceD_getDecimatedImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompRGBDBus
{

class RGBDBusPrx : public virtual ::Ice::Proxy<RGBDBusPrx, ::Ice::ObjectPrx>
{
public:

    ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompRGBDBus::CameraParamsMap>(true, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getAllCameraParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getAllCameraParamsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBDBus::CameraParamsMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBDBus::CameraParamsMap, P>(false, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getAllCameraParams, context);
    }

    ::std::function<void()>
    getAllCameraParamsAsync(::std::function<void(::RoboCompRGBDBus::CameraParamsMap)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRGBDBus::CameraParamsMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getAllCameraParams, context);
    }

    void _iceI_getAllCameraParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBDBus::CameraParamsMap>>&, const ::Ice::Context&);

    void getImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_images = _makePromiseOutgoing<::RoboCompRGBDBus::ImageMap>(true, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getImages, iceP_cameras, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getImagesAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBDBus::ImageMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBDBus::ImageMap, P>(false, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getImages, iceP_cameras, context);
    }

    ::std::function<void()>
    getImagesAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras,
                   ::std::function<void(::RoboCompRGBDBus::ImageMap)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRGBDBus::ImageMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getImages, iceP_cameras, context);
    }

    void _iceI_getImages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBDBus::ImageMap>>&, const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&);

    void getPointClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::RoboCompRGBDBus::PointCloudMap& iceP_clouds, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_clouds = _makePromiseOutgoing<::RoboCompRGBDBus::PointCloudMap>(true, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getPointClouds, iceP_cameras, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getPointCloudsAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBDBus::PointCloudMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBDBus::PointCloudMap, P>(false, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getPointClouds, iceP_cameras, context);
    }

    ::std::function<void()>
    getPointCloudsAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras,
                        ::std::function<void(::RoboCompRGBDBus::PointCloudMap)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRGBDBus::PointCloudMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getPointClouds, iceP_cameras, context);
    }

    void _iceI_getPointClouds(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBDBus::PointCloudMap>>&, const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&);

    void getProtoClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::RoboCompRGBDBus::PointCloudMap& iceP_protoClouds, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_protoClouds = _makePromiseOutgoing<::RoboCompRGBDBus::PointCloudMap>(true, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getProtoClouds, iceP_cameras, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getProtoCloudsAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBDBus::PointCloudMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBDBus::PointCloudMap, P>(false, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getProtoClouds, iceP_cameras, context);
    }

    ::std::function<void()>
    getProtoCloudsAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras,
                        ::std::function<void(::RoboCompRGBDBus::PointCloudMap)> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRGBDBus::PointCloudMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getProtoClouds, iceP_cameras, context);
    }

    void _iceI_getProtoClouds(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBDBus::PointCloudMap>>&, const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&);

    void getDecimatedImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, int iceP_decimation, ::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_images = _makePromiseOutgoing<::RoboCompRGBDBus::ImageMap>(true, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getDecimatedImages, iceP_cameras, iceP_decimation, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getDecimatedImagesAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras, int iceP_decimation, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompRGBDBus::ImageMap>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompRGBDBus::ImageMap, P>(false, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getDecimatedImages, iceP_cameras, iceP_decimation, context);
    }

    ::std::function<void()>
    getDecimatedImagesAsync(const ::RoboCompRGBDBus::CameraList& iceP_cameras, int iceP_decimation,
                            ::std::function<void(::RoboCompRGBDBus::ImageMap)> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompRGBDBus::ImageMap>(response, ex, sent, this, &RoboCompRGBDBus::RGBDBusPrx::_iceI_getDecimatedImages, iceP_cameras, iceP_decimation, context);
    }

    void _iceI_getDecimatedImages(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompRGBDBus::ImageMap>>&, const ::RoboCompRGBDBus::CameraList&, int, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    RGBDBusPrx() = default;
    friend ::std::shared_ptr<RGBDBusPrx> IceInternal::createProxy<RGBDBusPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompRGBDBus::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBDBus::CameraParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 33;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompRGBDBus::CameraParams, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::CameraParams& v)
    {
        istr->readAll(v.colorWidth, v.colorHeight, v.colorFPS, v.depthWidth, v.depthHeight, v.depthFPS, v.colorFocal, v.depthFocal, v.name);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBDBus::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 59;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompRGBDBus::Image, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Image& v)
    {
        istr->readAll(v.camera, v.colorImage, v.depthImage, v.width, v.height, v.colorTimestamp, v.depthTimestamp);
    }
};

template<>
struct StreamableTraits<::RoboCompRGBDBus::Point3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamReader<::RoboCompRGBDBus::Point3D, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Point3D& v)
    {
        istr->readAll(v.r, v.g, v.b, v.x, v.y, v.z);
    }
};

}

namespace RoboCompRGBDBus
{

using RGBDBusPtr = ::std::shared_ptr<RGBDBus>;
using RGBDBusPrxPtr = ::std::shared_ptr<RGBDBusPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompRGBDBus
{

class RGBDBus;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBDBus::RGBDBus>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompRGBDBus::RGBDBus*);

}

}

namespace RoboCompRGBDBus
{

class RGBDBus;
::Ice::Object* upCast(::RoboCompRGBDBus::RGBDBus*);
typedef ::IceInternal::Handle< ::RoboCompRGBDBus::RGBDBus> RGBDBusPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompRGBDBus::RGBDBus> RGBDBusPrx;
typedef RGBDBusPrx RGBDBusPrxPtr;
void _icePatchObjectPtr(RGBDBusPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompRGBDBus
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_id() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static HardwareFailedException _iceS_HardwareFailedException_init;

struct CameraParams
{
    ::Ice::Int colorWidth;
    ::Ice::Int colorHeight;
    ::Ice::Int colorFPS;
    ::Ice::Int depthWidth;
    ::Ice::Int depthHeight;
    ::Ice::Int depthFPS;
    ::Ice::Float colorFocal;
    ::Ice::Float depthFocal;
    ::std::string name;

    bool operator==(const CameraParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(colorWidth != rhs_.colorWidth)
        {
            return false;
        }
        if(colorHeight != rhs_.colorHeight)
        {
            return false;
        }
        if(colorFPS != rhs_.colorFPS)
        {
            return false;
        }
        if(depthWidth != rhs_.depthWidth)
        {
            return false;
        }
        if(depthHeight != rhs_.depthHeight)
        {
            return false;
        }
        if(depthFPS != rhs_.depthFPS)
        {
            return false;
        }
        if(colorFocal != rhs_.colorFocal)
        {
            return false;
        }
        if(depthFocal != rhs_.depthFocal)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        return true;
    }

    bool operator<(const CameraParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(colorWidth < rhs_.colorWidth)
        {
            return true;
        }
        else if(rhs_.colorWidth < colorWidth)
        {
            return false;
        }
        if(colorHeight < rhs_.colorHeight)
        {
            return true;
        }
        else if(rhs_.colorHeight < colorHeight)
        {
            return false;
        }
        if(colorFPS < rhs_.colorFPS)
        {
            return true;
        }
        else if(rhs_.colorFPS < colorFPS)
        {
            return false;
        }
        if(depthWidth < rhs_.depthWidth)
        {
            return true;
        }
        else if(rhs_.depthWidth < depthWidth)
        {
            return false;
        }
        if(depthHeight < rhs_.depthHeight)
        {
            return true;
        }
        else if(rhs_.depthHeight < depthHeight)
        {
            return false;
        }
        if(depthFPS < rhs_.depthFPS)
        {
            return true;
        }
        else if(rhs_.depthFPS < depthFPS)
        {
            return false;
        }
        if(colorFocal < rhs_.colorFocal)
        {
            return true;
        }
        else if(rhs_.colorFocal < colorFocal)
        {
            return false;
        }
        if(depthFocal < rhs_.depthFocal)
        {
            return true;
        }
        else if(rhs_.depthFocal < depthFocal)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const CameraParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const CameraParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const CameraParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const CameraParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, ::RoboCompRGBDBus::CameraParams> CameraParamsMap;

typedef ::std::vector< ::std::string> CameraList;

typedef ::std::vector< ::Ice::Byte> ColorBuffer;

typedef ::std::vector< ::Ice::Float> DepthBuffer;

struct Image
{
    ::RoboCompRGBDBus::CameraParams camera;
    ::RoboCompRGBDBus::ColorBuffer colorImage;
    ::RoboCompRGBDBus::DepthBuffer depthImage;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Long colorTimestamp;
    ::Ice::Long depthTimestamp;

    bool operator==(const Image& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(camera != rhs_.camera)
        {
            return false;
        }
        if(colorImage != rhs_.colorImage)
        {
            return false;
        }
        if(depthImage != rhs_.depthImage)
        {
            return false;
        }
        if(width != rhs_.width)
        {
            return false;
        }
        if(height != rhs_.height)
        {
            return false;
        }
        if(colorTimestamp != rhs_.colorTimestamp)
        {
            return false;
        }
        if(depthTimestamp != rhs_.depthTimestamp)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Image& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(camera < rhs_.camera)
        {
            return true;
        }
        else if(rhs_.camera < camera)
        {
            return false;
        }
        if(colorImage < rhs_.colorImage)
        {
            return true;
        }
        else if(rhs_.colorImage < colorImage)
        {
            return false;
        }
        if(depthImage < rhs_.depthImage)
        {
            return true;
        }
        else if(rhs_.depthImage < depthImage)
        {
            return false;
        }
        if(width < rhs_.width)
        {
            return true;
        }
        else if(rhs_.width < width)
        {
            return false;
        }
        if(height < rhs_.height)
        {
            return true;
        }
        else if(rhs_.height < height)
        {
            return false;
        }
        if(colorTimestamp < rhs_.colorTimestamp)
        {
            return true;
        }
        else if(rhs_.colorTimestamp < colorTimestamp)
        {
            return false;
        }
        if(depthTimestamp < rhs_.depthTimestamp)
        {
            return true;
        }
        else if(rhs_.depthTimestamp < depthTimestamp)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Image& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Image& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Image& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Image& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::map< ::std::string, ::RoboCompRGBDBus::Image> ImageMap;

struct Point3D
{
    ::Ice::Byte r;
    ::Ice::Byte g;
    ::Ice::Byte b;
    ::Ice::Float x;
    ::Ice::Float y;
    ::Ice::Float z;

    bool operator==(const Point3D& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(r != rhs_.r)
        {
            return false;
        }
        if(g != rhs_.g)
        {
            return false;
        }
        if(b != rhs_.b)
        {
            return false;
        }
        if(x != rhs_.x)
        {
            return false;
        }
        if(y != rhs_.y)
        {
            return false;
        }
        if(z != rhs_.z)
        {
            return false;
        }
        return true;
    }

    bool operator<(const Point3D& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(r < rhs_.r)
        {
            return true;
        }
        else if(rhs_.r < r)
        {
            return false;
        }
        if(g < rhs_.g)
        {
            return true;
        }
        else if(rhs_.g < g)
        {
            return false;
        }
        if(b < rhs_.b)
        {
            return true;
        }
        else if(rhs_.b < b)
        {
            return false;
        }
        if(x < rhs_.x)
        {
            return true;
        }
        else if(rhs_.x < x)
        {
            return false;
        }
        if(y < rhs_.y)
        {
            return true;
        }
        else if(rhs_.y < y)
        {
            return false;
        }
        if(z < rhs_.z)
        {
            return true;
        }
        else if(rhs_.z < z)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const Point3D& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const Point3D& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const Point3D& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const Point3D& rhs_) const
    {
        return !operator<(rhs_);
    }
};

typedef ::std::vector< ::RoboCompRGBDBus::Point3D> PointCloud;

typedef ::std::map< ::std::string, ::RoboCompRGBDBus::PointCloud> PointCloudMap;

}

namespace RoboCompRGBDBus
{

class Callback_RGBDBus_getAllCameraParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getAllCameraParams_Base> Callback_RGBDBus_getAllCameraParamsPtr;

class Callback_RGBDBus_getImages_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getImages_Base> Callback_RGBDBus_getImagesPtr;

class Callback_RGBDBus_getPointClouds_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getPointClouds_Base> Callback_RGBDBus_getPointCloudsPtr;

class Callback_RGBDBus_getProtoClouds_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getProtoClouds_Base> Callback_RGBDBus_getProtoCloudsPtr;

class Callback_RGBDBus_getDecimatedImages_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_RGBDBus_getDecimatedImages_Base> Callback_RGBDBus_getDecimatedImagesPtr;

}

namespace IceProxy
{

namespace RoboCompRGBDBus
{

class RGBDBus : public virtual ::Ice::Proxy<RGBDBus, ::IceProxy::Ice::Object>
{
public:

    ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getAllCameraParams(_iceI_begin_getAllCameraParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getAllCameraParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::RoboCompRGBDBus::Callback_RGBDBus_getAllCameraParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getAllCameraParams(const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getAllCameraParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getAllCameraParams(context, del, cookie);
    }

    ::RoboCompRGBDBus::CameraParamsMap end_getAllCameraParams(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getAllCameraParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getImages(iceP_images, _iceI_begin_getImages(iceP_cameras, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getImages(iceP_cameras, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(iceP_cameras, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(iceP_cameras, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getImagesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(iceP_cameras, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getImagesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getImages(iceP_cameras, context, del, cookie);
    }

    void end_getImages(::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getImages(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getPointClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::RoboCompRGBDBus::PointCloudMap& iceP_clouds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getPointClouds(iceP_clouds, _iceI_begin_getPointClouds(iceP_cameras, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getPointClouds(iceP_cameras, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(iceP_cameras, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(iceP_cameras, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getPointCloudsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(iceP_cameras, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getPointClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getPointCloudsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getPointClouds(iceP_cameras, context, del, cookie);
    }

    void end_getPointClouds(::RoboCompRGBDBus::PointCloudMap& iceP_clouds, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getPointClouds(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getProtoClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::RoboCompRGBDBus::PointCloudMap& iceP_protoClouds, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getProtoClouds(iceP_protoClouds, _iceI_begin_getProtoClouds(iceP_cameras, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getProtoClouds(iceP_cameras, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(iceP_cameras, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(iceP_cameras, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::RoboCompRGBDBus::Callback_RGBDBus_getProtoCloudsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(iceP_cameras, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList& iceP_cameras, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getProtoCloudsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getProtoClouds(iceP_cameras, context, del, cookie);
    }

    void end_getProtoClouds(::RoboCompRGBDBus::PointCloudMap& iceP_protoClouds, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getProtoClouds(const ::RoboCompRGBDBus::CameraList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getDecimatedImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::Ice::Int iceP_decimation, ::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getDecimatedImages(iceP_images, _iceI_begin_getDecimatedImages(iceP_cameras, iceP_decimation, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::Ice::Int iceP_decimation, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getDecimatedImages(iceP_cameras, iceP_decimation, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::Ice::Int iceP_decimation, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(iceP_cameras, iceP_decimation, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::Ice::Int iceP_decimation, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(iceP_cameras, iceP_decimation, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::Ice::Int iceP_decimation, const ::RoboCompRGBDBus::Callback_RGBDBus_getDecimatedImagesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(iceP_cameras, iceP_decimation, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList& iceP_cameras, ::Ice::Int iceP_decimation, const ::Ice::Context& context, const ::RoboCompRGBDBus::Callback_RGBDBus_getDecimatedImagesPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getDecimatedImages(iceP_cameras, iceP_decimation, context, del, cookie);
    }

    void end_getDecimatedImages(::RoboCompRGBDBus::ImageMap& iceP_images, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompRGBDBus
{

class RGBDBus : public virtual ::Ice::Object
{
public:

    typedef RGBDBusPrx ProxyType;
    typedef RGBDBusPtr PointerType;

    virtual ~RGBDBus();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual ::RoboCompRGBDBus::CameraParamsMap getAllCameraParams(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getAllCameraParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getImages(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getPointClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getPointClouds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getProtoClouds(const ::RoboCompRGBDBus::CameraList&, ::RoboCompRGBDBus::PointCloudMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getProtoClouds(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getDecimatedImages(const ::RoboCompRGBDBus::CameraList&, ::Ice::Int, ::RoboCompRGBDBus::ImageMap&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getDecimatedImages(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const RGBDBus& lhs, const RGBDBus& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const RGBDBus& lhs, const RGBDBus& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompRGBDBus::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::CameraParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 33;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::CameraParams, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::CameraParams& v)
    {
        ostr->write(v.colorWidth);
        ostr->write(v.colorHeight);
        ostr->write(v.colorFPS);
        ostr->write(v.depthWidth);
        ostr->write(v.depthHeight);
        ostr->write(v.depthFPS);
        ostr->write(v.colorFocal);
        ostr->write(v.depthFocal);
        ostr->write(v.name);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::CameraParams, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::CameraParams& v)
    {
        istr->read(v.colorWidth);
        istr->read(v.colorHeight);
        istr->read(v.colorFPS);
        istr->read(v.depthWidth);
        istr->read(v.depthHeight);
        istr->read(v.depthFPS);
        istr->read(v.colorFocal);
        istr->read(v.depthFocal);
        istr->read(v.name);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::Image>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 59;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::Image, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::Image& v)
    {
        ostr->write(v.camera);
        ostr->write(v.colorImage);
        ostr->write(v.depthImage);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.colorTimestamp);
        ostr->write(v.depthTimestamp);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::Image, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Image& v)
    {
        istr->read(v.camera);
        istr->read(v.colorImage);
        istr->read(v.depthImage);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.colorTimestamp);
        istr->read(v.depthTimestamp);
    }
};

template<>
struct StreamableTraits< ::RoboCompRGBDBus::Point3D>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 15;
    static const bool fixedLength = true;
};

template<typename S>
struct StreamWriter< ::RoboCompRGBDBus::Point3D, S>
{
    static void write(S* ostr, const ::RoboCompRGBDBus::Point3D& v)
    {
        ostr->write(v.r);
        ostr->write(v.g);
        ostr->write(v.b);
        ostr->write(v.x);
        ostr->write(v.y);
        ostr->write(v.z);
    }
};

template<typename S>
struct StreamReader< ::RoboCompRGBDBus::Point3D, S>
{
    static void read(S* istr, ::RoboCompRGBDBus::Point3D& v)
    {
        istr->read(v.r);
        istr->read(v.g);
        istr->read(v.b);
        istr->read(v.x);
        istr->read(v.y);
        istr->read(v.z);
    }
};

}

namespace RoboCompRGBDBus
{

template<class T>
class CallbackNC_RGBDBus_getAllCameraParams : public Callback_RGBDBus_getAllCameraParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::CameraParamsMap&);

    CallbackNC_RGBDBus_getAllCameraParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::CameraParamsMap ret;
        try
        {
            ret = proxy->end_getAllCameraParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getAllCameraParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getAllCameraParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getAllCameraParams : public Callback_RGBDBus_getAllCameraParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::CameraParamsMap&, const CT&);

    Callback_RGBDBus_getAllCameraParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::CameraParamsMap ret;
        try
        {
            ret = proxy->end_getAllCameraParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getAllCameraParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getAllCameraParamsPtr
newCallback_RGBDBus_getAllCameraParams(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::CameraParamsMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getAllCameraParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getImages : public Callback_RGBDBus_getImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&);

    CallbackNC_RGBDBus_getImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::ImageMap iceP_images;
        try
        {
            proxy->end_getImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_images);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getImages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getImages : public Callback_RGBDBus_getImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&, const CT&);

    Callback_RGBDBus_getImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::ImageMap iceP_images;
        try
        {
            proxy->end_getImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_images, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getImagesPtr
newCallback_RGBDBus_getImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getPointClouds : public Callback_RGBDBus_getPointClouds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&);

    CallbackNC_RGBDBus_getPointClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap iceP_clouds;
        try
        {
            proxy->end_getPointClouds(iceP_clouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_clouds);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getPointClouds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getPointClouds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getPointClouds : public Callback_RGBDBus_getPointClouds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&);

    Callback_RGBDBus_getPointClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap iceP_clouds;
        try
        {
            proxy->end_getPointClouds(iceP_clouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_clouds, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getPointClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getPointCloudsPtr
newCallback_RGBDBus_getPointClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getPointClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getProtoClouds : public Callback_RGBDBus_getProtoClouds_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&);

    CallbackNC_RGBDBus_getProtoClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap iceP_protoClouds;
        try
        {
            proxy->end_getProtoClouds(iceP_protoClouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_protoClouds);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getProtoClouds<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getProtoClouds<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getProtoClouds : public Callback_RGBDBus_getProtoClouds_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&);

    Callback_RGBDBus_getProtoClouds(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::PointCloudMap iceP_protoClouds;
        try
        {
            proxy->end_getProtoClouds(iceP_protoClouds, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_protoClouds, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getProtoClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getProtoCloudsPtr
newCallback_RGBDBus_getProtoClouds(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::PointCloudMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getProtoClouds<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_RGBDBus_getDecimatedImages : public Callback_RGBDBus_getDecimatedImages_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&);

    CallbackNC_RGBDBus_getDecimatedImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::ImageMap iceP_images;
        try
        {
            proxy->end_getDecimatedImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_images);
        }
    }

private:

    Response _response;
};

template<class T> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getDecimatedImages<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_RGBDBus_getDecimatedImages<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_RGBDBus_getDecimatedImages : public Callback_RGBDBus_getDecimatedImages_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompRGBDBus::ImageMap&, const CT&);

    Callback_RGBDBus_getDecimatedImages(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompRGBDBus::RGBDBusPrx proxy = ::RoboCompRGBDBus::RGBDBusPrx::uncheckedCast(result->getProxy());
        ::RoboCompRGBDBus::ImageMap iceP_images;
        try
        {
            proxy->end_getDecimatedImages(iceP_images, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_images, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getDecimatedImages<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_RGBDBus_getDecimatedImagesPtr
newCallback_RGBDBus_getDecimatedImages(T* instance, void (T::*cb)(const ::RoboCompRGBDBus::ImageMap&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_RGBDBus_getDecimatedImages<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
