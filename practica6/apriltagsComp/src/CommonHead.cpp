// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `CommonHead.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <CommonHead.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ValueFactory.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/InputStream.h>
#include <Ice/OutputStream.h>
#include <Ice/LocalException.h>
#include <IceUtil/PopDisableWarnings.h>

#if defined(_MSC_VER)
#   pragma warning(disable:4458) // declaration of ... hides class member
#elif defined(__clang__)
#   pragma clang diagnostic ignored "-Wshadow"
#elif defined(__GNUC__)
#   pragma GCC diagnostic ignored "-Wshadow"
#endif

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace
{

const ::std::string iceC_RoboCompCommonHead_CommonHead_ids[2] =
{
    "::Ice::Object",
    "::RoboCompCommonHead::CommonHead"
};
const ::std::string iceC_RoboCompCommonHead_CommonHead_ops[] =
{
    "getHeadParams",
    "getHeadState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isMovingHead",
    "resetHead",
    "saccadic2DLeft",
    "saccadic2DRight",
    "saccadic3D",
    "saccadic4D",
    "setNMotorsPosition",
    "setNeck",
    "setPanLeft",
    "setPanRight",
    "setTilt",
    "stopHead"
};
const ::std::string iceC_RoboCompCommonHead_CommonHead_resetHead_name = "resetHead";
const ::std::string iceC_RoboCompCommonHead_CommonHead_stopHead_name = "stopHead";
const ::std::string iceC_RoboCompCommonHead_CommonHead_setPanLeft_name = "setPanLeft";
const ::std::string iceC_RoboCompCommonHead_CommonHead_setPanRight_name = "setPanRight";
const ::std::string iceC_RoboCompCommonHead_CommonHead_setTilt_name = "setTilt";
const ::std::string iceC_RoboCompCommonHead_CommonHead_setNeck_name = "setNeck";
const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name = "saccadic2DLeft";
const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name = "saccadic2DRight";
const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic3D_name = "saccadic3D";
const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic4D_name = "saccadic4D";
const ::std::string iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name = "setNMotorsPosition";
const ::std::string iceC_RoboCompCommonHead_CommonHead_getHeadParams_name = "getHeadParams";
const ::std::string iceC_RoboCompCommonHead_CommonHead_getHeadState_name = "getHeadState";
const ::std::string iceC_RoboCompCommonHead_CommonHead_isMovingHead_name = "isMovingHead";

}

bool
RoboCompCommonHead::CommonHead::ice_isA(::std::string s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompCommonHead_CommonHead_ids, iceC_RoboCompCommonHead_CommonHead_ids + 2, s);
}

::std::vector<::std::string>
RoboCompCommonHead::CommonHead::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector<::std::string>(&iceC_RoboCompCommonHead_CommonHead_ids[0], &iceC_RoboCompCommonHead_CommonHead_ids[2]);
}

::std::string
RoboCompCommonHead::CommonHead::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompCommonHead::CommonHead::ice_staticId()
{
    static const ::std::string typeId = "::RoboCompCommonHead::CommonHead";
    return typeId;
}

bool
RoboCompCommonHead::CommonHead::_iceD_resetHead(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->resetHead(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_stopHead(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    this->stopHead(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setPanLeft(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_pan;
    istr->readAll(iceP_pan);
    inS.endReadParams();
    this->setPanLeft(iceP_pan, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setPanRight(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_pan;
    istr->readAll(iceP_pan);
    inS.endReadParams();
    this->setPanRight(iceP_pan, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setTilt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_tilt;
    istr->readAll(iceP_tilt);
    inS.endReadParams();
    this->setTilt(iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setNeck(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_neck;
    istr->readAll(iceP_neck);
    inS.endReadParams();
    this->setNeck(iceP_neck, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic2DLeft(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_leftPan;
    float iceP_tilt;
    istr->readAll(iceP_leftPan, iceP_tilt);
    inS.endReadParams();
    this->saccadic2DLeft(iceP_leftPan, iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic2DRight(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_rightPan;
    float iceP_tilt;
    istr->readAll(iceP_rightPan, iceP_tilt);
    inS.endReadParams();
    this->saccadic2DRight(iceP_rightPan, iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic3D(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_leftPan;
    float iceP_rightPan;
    float iceP_tilt;
    istr->readAll(iceP_leftPan, iceP_rightPan, iceP_tilt);
    inS.endReadParams();
    this->saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic4D(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    float iceP_leftPan;
    float iceP_rightPan;
    float iceP_tilt;
    float iceP_neck;
    istr->readAll(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck);
    inS.endReadParams();
    this->saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setNMotorsPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    auto istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPositionList iceP_listGoals;
    istr->readAll(iceP_listGoals);
    inS.endReadParams();
    this->setNMotorsPosition(::std::move(iceP_listGoals), current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_getHeadParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompCommonHead::THeadParams ret = this->getHeadParams(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_getHeadState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompCommonHead::THeadState iceP_hState;
    this->getHeadState(iceP_hState, current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(iceP_hState);
    inS.endWriteParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_isMovingHead(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::OperationMode::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->isMovingHead(current);
    auto ostr = inS.startWriteParams();
    ostr->writeAll(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompCommonHead_CommonHead_ops, iceC_RoboCompCommonHead_CommonHead_ops + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompCommonHead_CommonHead_ops)
    {
        case 0:
        {
            return _iceD_getHeadParams(in, current);
        }
        case 1:
        {
            return _iceD_getHeadState(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_isMovingHead(in, current);
        }
        case 7:
        {
            return _iceD_resetHead(in, current);
        }
        case 8:
        {
            return _iceD_saccadic2DLeft(in, current);
        }
        case 9:
        {
            return _iceD_saccadic2DRight(in, current);
        }
        case 10:
        {
            return _iceD_saccadic3D(in, current);
        }
        case 11:
        {
            return _iceD_saccadic4D(in, current);
        }
        case 12:
        {
            return _iceD_setNMotorsPosition(in, current);
        }
        case 13:
        {
            return _iceD_setNeck(in, current);
        }
        case 14:
        {
            return _iceD_setPanLeft(in, current);
        }
        case 15:
        {
            return _iceD_setPanRight(in, current);
        }
        case 16:
        {
            return _iceD_setTilt(in, current);
        }
        case 17:
        {
            return _iceD_stopHead(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_resetHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_resetHead_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_stopHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::Ice::Context& context)
{
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_stopHead_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_setPanLeft(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_pan, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setPanLeft_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_setPanLeft_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pan);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_setPanRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_pan, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setPanRight_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_setPanRight_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_pan);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_setTilt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_tilt, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setTilt_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_setTilt_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_tilt);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_setNeck(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_neck, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setNeck_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_setNeck_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_neck);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DLeft(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_leftPan, float iceP_tilt, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_leftPan, iceP_tilt);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_rightPan, float iceP_tilt, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_rightPan, iceP_tilt);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic3D(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_leftPan, float iceP_rightPan, float iceP_tilt, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic3D_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic3D_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_leftPan, iceP_rightPan, iceP_tilt);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic4D(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, float iceP_leftPan, float iceP_rightPan, float iceP_tilt, float iceP_neck, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic4D_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic4D_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_setNMotorsPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>& outAsync, const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        [&](::Ice::OutputStream* ostr)
        {
            ostr->writeAll(iceP_listGoals);
        },
        [](const ::Ice::UserException& ex)
        {
            try
            {
                ex.ice_throw();
            }
            catch(const ::RoboCompJointMotor::OutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException&)
            {
            }
        });
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCommonHead::THeadParams>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_getHeadParams_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_getHeadParams_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCommonHead::THeadState>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_getHeadState_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_getHeadState_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

void
RoboCompCommonHead::CommonHeadPrx::_iceI_isMovingHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>& outAsync, const ::Ice::Context& context)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_isMovingHead_name);
    outAsync->invoke(iceC_RoboCompCommonHead_CommonHead_isMovingHead_name, ::Ice::OperationMode::Normal, ::Ice::FormatType::DefaultFormat, context,
        nullptr,
        nullptr);
}

::std::shared_ptr<::Ice::ObjectPrx>
RoboCompCommonHead::CommonHeadPrx::_newInstance() const
{
    return ::IceInternal::createProxy<CommonHeadPrx>();
}

const ::std::string&
RoboCompCommonHead::CommonHeadPrx::ice_staticId()
{
    return RoboCompCommonHead::CommonHead::ice_staticId();
}

namespace Ice
{
}

#else // C++98 mapping

namespace
{

const ::std::string iceC_RoboCompCommonHead_CommonHead_resetHead_name = "resetHead";

const ::std::string iceC_RoboCompCommonHead_CommonHead_stopHead_name = "stopHead";

const ::std::string iceC_RoboCompCommonHead_CommonHead_setPanLeft_name = "setPanLeft";

const ::std::string iceC_RoboCompCommonHead_CommonHead_setPanRight_name = "setPanRight";

const ::std::string iceC_RoboCompCommonHead_CommonHead_setTilt_name = "setTilt";

const ::std::string iceC_RoboCompCommonHead_CommonHead_setNeck_name = "setNeck";

const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name = "saccadic2DLeft";

const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name = "saccadic2DRight";

const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic3D_name = "saccadic3D";

const ::std::string iceC_RoboCompCommonHead_CommonHead_saccadic4D_name = "saccadic4D";

const ::std::string iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name = "setNMotorsPosition";

const ::std::string iceC_RoboCompCommonHead_CommonHead_getHeadParams_name = "getHeadParams";

const ::std::string iceC_RoboCompCommonHead_CommonHead_getHeadState_name = "getHeadState";

const ::std::string iceC_RoboCompCommonHead_CommonHead_isMovingHead_name = "isMovingHead";

}
::IceProxy::Ice::Object* ::IceProxy::RoboCompCommonHead::upCast(::IceProxy::RoboCompCommonHead::CommonHead* p) { return p; }

void
::IceProxy::RoboCompCommonHead::_readProxy(::Ice::InputStream* istr, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead>& v)
{
    ::Ice::ObjectPrx proxy;
    istr->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompCommonHead::CommonHead;
        v->_copyFrom(proxy);
    }
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_resetHead(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_resetHead_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_resetHead_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_resetHead_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_resetHead(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompCommonHead_CommonHead_resetHead_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_stopHead(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_stopHead_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_stopHead_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_stopHead_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_stopHead(const ::Ice::AsyncResultPtr& result)
{
    _end(result, iceC_RoboCompCommonHead_CommonHead_stopHead_name);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_setPanLeft(::Ice::Float iceP_pan, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setPanLeft_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_setPanLeft_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_setPanLeft_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pan);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_setPanLeft_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_setPanLeft(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_setPanLeft_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_setPanRight(::Ice::Float iceP_pan, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setPanRight_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_setPanRight_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_setPanRight_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_pan);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_setPanRight_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_setPanRight(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_setPanRight_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_setTilt(::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setTilt_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_setTilt_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_setTilt_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_tilt);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_setTilt_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_setTilt(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_setTilt_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_setNeck(::Ice::Float iceP_neck, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setNeck_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_setNeck_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_setNeck_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_neck);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_setNeck_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_setNeck(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_setNeck_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_saccadic2DLeft(::Ice::Float iceP_leftPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_leftPan);
        ostr->write(iceP_tilt);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic2DLeft(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_saccadic2DLeft_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_saccadic2DRight(::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_rightPan);
        ostr->write(iceP_tilt);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic2DRight(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_saccadic2DRight_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_saccadic3D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic3D_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_saccadic3D_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_saccadic3D_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_leftPan);
        ostr->write(iceP_rightPan);
        ostr->write(iceP_tilt);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic3D_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic3D(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_saccadic3D_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_saccadic4D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, ::Ice::Float iceP_neck, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_saccadic4D_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_saccadic4D_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_saccadic4D_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_leftPan);
        ostr->write(iceP_rightPan);
        ostr->write(iceP_tilt);
        ostr->write(iceP_neck);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_saccadic4D_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_saccadic4D(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_saccadic4D_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name, ::Ice::Normal, context);
        ::Ice::OutputStream* ostr = result->startWriteParams(::Ice::DefaultFormat);
        ostr->write(iceP_listGoals);
        result->endWriteParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_setNMotorsPosition(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_setNMotorsPosition_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::RoboCompJointMotor::OutOfRangeException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    result->_readEmptyParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_getHeadParams(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_getHeadParams_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_getHeadParams_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_getHeadParams_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_getHeadParams_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

::RoboCompCommonHead::THeadParams
IceProxy::RoboCompCommonHead::CommonHead::end_getHeadParams(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_getHeadParams_name);
    ::RoboCompCommonHead::THeadParams ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_getHeadState(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_getHeadState_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_getHeadState_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_getHeadState_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_getHeadState_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

void
IceProxy::RoboCompCommonHead::CommonHead::end_getHeadState(::RoboCompCommonHead::THeadState& iceP_hState, const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_getHeadState_name);
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(iceP_hState);
    result->_endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompCommonHead::CommonHead::_iceI_begin_isMovingHead(const ::Ice::Context& context, const ::IceInternal::CallbackBasePtr& del, const ::Ice::LocalObjectPtr& cookie, bool sync)
{
    _checkTwowayOnly(iceC_RoboCompCommonHead_CommonHead_isMovingHead_name, sync);
    ::IceInternal::OutgoingAsyncPtr result = new ::IceInternal::CallbackOutgoing(this, iceC_RoboCompCommonHead_CommonHead_isMovingHead_name, del, cookie, sync);
    try
    {
        result->prepare(iceC_RoboCompCommonHead_CommonHead_isMovingHead_name, ::Ice::Normal, context);
        result->writeEmptyParams();
        result->invoke(iceC_RoboCompCommonHead_CommonHead_isMovingHead_name);
    }
    catch(const ::Ice::Exception& ex)
    {
        result->abort(ex);
    }
    return result;
}

bool
IceProxy::RoboCompCommonHead::CommonHead::end_isMovingHead(const ::Ice::AsyncResultPtr& result)
{
    ::Ice::AsyncResult::_check(result, this, iceC_RoboCompCommonHead_CommonHead_isMovingHead_name);
    bool ret;
    if(!result->_waitForResponse())
    {
        try
        {
            result->_throwUserException();
        }
        catch(const ::Ice::UserException& ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, ex.ice_id());
        }
    }
    ::Ice::InputStream* istr = result->_startReadParams();
    istr->read(ret);
    result->_endReadParams();
    return ret;
}

::IceProxy::Ice::Object*
IceProxy::RoboCompCommonHead::CommonHead::_newInstance() const
{
    return new CommonHead;
}

const ::std::string&
IceProxy::RoboCompCommonHead::CommonHead::ice_staticId()
{
    return ::RoboCompCommonHead::CommonHead::ice_staticId();
}

RoboCompCommonHead::CommonHead::~CommonHead()
{
}

::Ice::Object* RoboCompCommonHead::upCast(::RoboCompCommonHead::CommonHead* p) { return p; }


namespace
{
const ::std::string iceC_RoboCompCommonHead_CommonHead_ids[2] =
{
    "::Ice::Object",
    "::RoboCompCommonHead::CommonHead"
};

}

bool
RoboCompCommonHead::CommonHead::ice_isA(const ::std::string& s, const ::Ice::Current&) const
{
    return ::std::binary_search(iceC_RoboCompCommonHead_CommonHead_ids, iceC_RoboCompCommonHead_CommonHead_ids + 2, s);
}

::std::vector< ::std::string>
RoboCompCommonHead::CommonHead::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&iceC_RoboCompCommonHead_CommonHead_ids[0], &iceC_RoboCompCommonHead_CommonHead_ids[2]);
}

const ::std::string&
RoboCompCommonHead::CommonHead::ice_id(const ::Ice::Current&) const
{
    return ice_staticId();
}

const ::std::string&
RoboCompCommonHead::CommonHead::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompCommonHead::CommonHead";
    return typeId;
#else
    return iceC_RoboCompCommonHead_CommonHead_ids[1];
#endif
}

bool
RoboCompCommonHead::CommonHead::_iceD_resetHead(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->resetHead(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_stopHead(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    this->stopHead(current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setPanLeft(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_pan;
    istr->read(iceP_pan);
    inS.endReadParams();
    this->setPanLeft(iceP_pan, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setPanRight(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_pan;
    istr->read(iceP_pan);
    inS.endReadParams();
    this->setPanRight(iceP_pan, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setTilt(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_tilt;
    istr->read(iceP_tilt);
    inS.endReadParams();
    this->setTilt(iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setNeck(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_neck;
    istr->read(iceP_neck);
    inS.endReadParams();
    this->setNeck(iceP_neck, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic2DLeft(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_leftPan;
    ::Ice::Float iceP_tilt;
    istr->read(iceP_leftPan);
    istr->read(iceP_tilt);
    inS.endReadParams();
    this->saccadic2DLeft(iceP_leftPan, iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic2DRight(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_rightPan;
    ::Ice::Float iceP_tilt;
    istr->read(iceP_rightPan);
    istr->read(iceP_tilt);
    inS.endReadParams();
    this->saccadic2DRight(iceP_rightPan, iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic3D(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_leftPan;
    ::Ice::Float iceP_rightPan;
    ::Ice::Float iceP_tilt;
    istr->read(iceP_leftPan);
    istr->read(iceP_rightPan);
    istr->read(iceP_tilt);
    inS.endReadParams();
    this->saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_saccadic4D(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::Ice::Float iceP_leftPan;
    ::Ice::Float iceP_rightPan;
    ::Ice::Float iceP_tilt;
    ::Ice::Float iceP_neck;
    istr->read(iceP_leftPan);
    istr->read(iceP_rightPan);
    istr->read(iceP_tilt);
    istr->read(iceP_neck);
    inS.endReadParams();
    this->saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_setNMotorsPosition(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    ::Ice::InputStream* istr = inS.startReadParams();
    ::RoboCompJointMotor::MotorGoalPositionList iceP_listGoals;
    istr->read(iceP_listGoals);
    inS.endReadParams();
    this->setNMotorsPosition(iceP_listGoals, current);
    inS.writeEmptyParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_getHeadParams(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompCommonHead::THeadParams ret = this->getHeadParams(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_getHeadState(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    ::RoboCompCommonHead::THeadState iceP_hState;
    this->getHeadState(iceP_hState, current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(iceP_hState);
    inS.endWriteParams();
    return true;
}

bool
RoboCompCommonHead::CommonHead::_iceD_isMovingHead(::IceInternal::Incoming& inS, const ::Ice::Current& current)
{
    _iceCheckMode(::Ice::Normal, current.mode);
    inS.readEmptyParams();
    bool ret = this->isMovingHead(current);
    ::Ice::OutputStream* ostr = inS.startWriteParams();
    ostr->write(ret);
    inS.endWriteParams();
    return true;
}

namespace
{
const ::std::string iceC_RoboCompCommonHead_CommonHead_all[] =
{
    "getHeadParams",
    "getHeadState",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "isMovingHead",
    "resetHead",
    "saccadic2DLeft",
    "saccadic2DRight",
    "saccadic3D",
    "saccadic4D",
    "setNMotorsPosition",
    "setNeck",
    "setPanLeft",
    "setPanRight",
    "setTilt",
    "stopHead"
};

}

bool
RoboCompCommonHead::CommonHead::_iceDispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair<const ::std::string*, const ::std::string*> r = ::std::equal_range(iceC_RoboCompCommonHead_CommonHead_all, iceC_RoboCompCommonHead_CommonHead_all + 18, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - iceC_RoboCompCommonHead_CommonHead_all)
    {
        case 0:
        {
            return _iceD_getHeadParams(in, current);
        }
        case 1:
        {
            return _iceD_getHeadState(in, current);
        }
        case 2:
        {
            return _iceD_ice_id(in, current);
        }
        case 3:
        {
            return _iceD_ice_ids(in, current);
        }
        case 4:
        {
            return _iceD_ice_isA(in, current);
        }
        case 5:
        {
            return _iceD_ice_ping(in, current);
        }
        case 6:
        {
            return _iceD_isMovingHead(in, current);
        }
        case 7:
        {
            return _iceD_resetHead(in, current);
        }
        case 8:
        {
            return _iceD_saccadic2DLeft(in, current);
        }
        case 9:
        {
            return _iceD_saccadic2DRight(in, current);
        }
        case 10:
        {
            return _iceD_saccadic3D(in, current);
        }
        case 11:
        {
            return _iceD_saccadic4D(in, current);
        }
        case 12:
        {
            return _iceD_setNMotorsPosition(in, current);
        }
        case 13:
        {
            return _iceD_setNeck(in, current);
        }
        case 14:
        {
            return _iceD_setPanLeft(in, current);
        }
        case 15:
        {
            return _iceD_setPanRight(in, current);
        }
        case 16:
        {
            return _iceD_setTilt(in, current);
        }
        case 17:
        {
            return _iceD_stopHead(in, current);
        }
        default:
        {
            assert(false);
            throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
        }
    }
}

void
RoboCompCommonHead::CommonHead::_iceWriteImpl(::Ice::OutputStream* ostr) const
{
    ostr->startSlice(ice_staticId(), -1, true);
    Ice::StreamWriter< ::RoboCompCommonHead::CommonHead, ::Ice::OutputStream>::write(ostr, *this);
    ostr->endSlice();
}

void
RoboCompCommonHead::CommonHead::_iceReadImpl(::Ice::InputStream* istr)
{
    istr->startSlice();
    Ice::StreamReader< ::RoboCompCommonHead::CommonHead, ::Ice::InputStream>::read(istr, *this);
    istr->endSlice();
}

void
RoboCompCommonHead::_icePatchObjectPtr(CommonHeadPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompCommonHead::CommonHeadPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompCommonHead::CommonHead::ice_staticId(), v);
    }
}

namespace Ice
{
}

#endif
