// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `CommonHead.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __CommonHead_h__
#define __CommonHead_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <JointMotor.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompCommonHead
{

class CommonHead;
class CommonHeadPrx;

}

namespace RoboCompCommonHead
{

using dmotorParams = ::std::map<::std::string, ::RoboCompJointMotor::MotorParams>;

struct THeadParams
{
    ::RoboCompCommonHead::dmotorParams motorsParams;
    ::std::string model;

    std::tuple<const ::RoboCompCommonHead::dmotorParams&, const ::std::string&> ice_tuple() const
    {
        return std::tie(motorsParams, model);
    }
};

using dmotorsState = ::std::map<::std::string, ::RoboCompJointMotor::MotorState>;

struct THeadState
{
    ::RoboCompCommonHead::dmotorsState motorsState;
    bool isMoving;

    std::tuple<const ::RoboCompCommonHead::dmotorsState&, const bool&> ice_tuple() const
    {
        return std::tie(motorsState, isMoving);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompCommonHead
{

class CommonHead : public virtual ::Ice::Object
{
public:

    using ProxyType = CommonHeadPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    virtual void resetHead(const ::Ice::Current&) = 0;
    bool _iceD_resetHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopHead(const ::Ice::Current&) = 0;
    bool _iceD_stopHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPanLeft(float, const ::Ice::Current&) = 0;
    bool _iceD_setPanLeft(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPanRight(float, const ::Ice::Current&) = 0;
    bool _iceD_setPanRight(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTilt(float, const ::Ice::Current&) = 0;
    bool _iceD_setTilt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setNeck(float, const ::Ice::Current&) = 0;
    bool _iceD_setNeck(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic2DLeft(float, float, const ::Ice::Current&) = 0;
    bool _iceD_saccadic2DLeft(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic2DRight(float, float, const ::Ice::Current&) = 0;
    bool _iceD_saccadic2DRight(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic3D(float, float, float, const ::Ice::Current&) = 0;
    bool _iceD_saccadic3D(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic4D(float, float, float, float, const ::Ice::Current&) = 0;
    bool _iceD_saccadic4D(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setNMotorsPosition(::RoboCompJointMotor::MotorGoalPositionList, const ::Ice::Current&) = 0;
    bool _iceD_setNMotorsPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Current&) = 0;
    bool _iceD_getHeadParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getHeadState(::RoboCompCommonHead::THeadState&, const ::Ice::Current&) = 0;
    bool _iceD_getHeadState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isMovingHead(const ::Ice::Current&) = 0;
    bool _iceD_isMovingHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompCommonHead
{

class CommonHeadPrx : public virtual ::Ice::Proxy<CommonHeadPrx, ::Ice::ObjectPrx>
{
public:

    void resetHead(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_resetHead, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto resetHeadAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_resetHead, context);
    }

    ::std::function<void()>
    resetHeadAsync(::std::function<void()> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_resetHead, context);
    }

    void _iceI_resetHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    void stopHead(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_stopHead, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto stopHeadAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_stopHead, context);
    }

    ::std::function<void()>
    stopHeadAsync(::std::function<void()> response,
                  ::std::function<void(::std::exception_ptr)> ex = nullptr,
                  ::std::function<void(bool)> sent = nullptr,
                  const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_stopHead, context);
    }

    void _iceI_stopHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::Ice::Context&);

    void setPanLeft(float iceP_pan, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setPanLeft, iceP_pan, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPanLeftAsync(float iceP_pan, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setPanLeft, iceP_pan, context);
    }

    ::std::function<void()>
    setPanLeftAsync(float iceP_pan,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setPanLeft, iceP_pan, context);
    }

    void _iceI_setPanLeft(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);

    void setPanRight(float iceP_pan, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setPanRight, iceP_pan, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setPanRightAsync(float iceP_pan, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setPanRight, iceP_pan, context);
    }

    ::std::function<void()>
    setPanRightAsync(float iceP_pan,
                     ::std::function<void()> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setPanRight, iceP_pan, context);
    }

    void _iceI_setPanRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);

    void setTilt(float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setTilt, iceP_tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setTiltAsync(float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setTilt, iceP_tilt, context);
    }

    ::std::function<void()>
    setTiltAsync(float iceP_tilt,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setTilt, iceP_tilt, context);
    }

    void _iceI_setTilt(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);

    void setNeck(float iceP_neck, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setNeck, iceP_neck, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setNeckAsync(float iceP_neck, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setNeck, iceP_neck, context);
    }

    ::std::function<void()>
    setNeckAsync(float iceP_neck,
                 ::std::function<void()> response,
                 ::std::function<void(::std::exception_ptr)> ex = nullptr,
                 ::std::function<void(bool)> sent = nullptr,
                 const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setNeck, iceP_neck, context);
    }

    void _iceI_setNeck(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, const ::Ice::Context&);

    void saccadic2DLeft(float iceP_leftPan, float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DLeft, iceP_leftPan, iceP_tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic2DLeftAsync(float iceP_leftPan, float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DLeft, iceP_leftPan, iceP_tilt, context);
    }

    ::std::function<void()>
    saccadic2DLeftAsync(float iceP_leftPan, float iceP_tilt,
                        ::std::function<void()> response,
                        ::std::function<void(::std::exception_ptr)> ex = nullptr,
                        ::std::function<void(bool)> sent = nullptr,
                        const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DLeft, iceP_leftPan, iceP_tilt, context);
    }

    void _iceI_saccadic2DLeft(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, const ::Ice::Context&);

    void saccadic2DRight(float iceP_rightPan, float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DRight, iceP_rightPan, iceP_tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic2DRightAsync(float iceP_rightPan, float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DRight, iceP_rightPan, iceP_tilt, context);
    }

    ::std::function<void()>
    saccadic2DRightAsync(float iceP_rightPan, float iceP_tilt,
                         ::std::function<void()> response,
                         ::std::function<void(::std::exception_ptr)> ex = nullptr,
                         ::std::function<void(bool)> sent = nullptr,
                         const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic2DRight, iceP_rightPan, iceP_tilt, context);
    }

    void _iceI_saccadic2DRight(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, const ::Ice::Context&);

    void saccadic3D(float iceP_leftPan, float iceP_rightPan, float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic3D, iceP_leftPan, iceP_rightPan, iceP_tilt, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic3DAsync(float iceP_leftPan, float iceP_rightPan, float iceP_tilt, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic3D, iceP_leftPan, iceP_rightPan, iceP_tilt, context);
    }

    ::std::function<void()>
    saccadic3DAsync(float iceP_leftPan, float iceP_rightPan, float iceP_tilt,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic3D, iceP_leftPan, iceP_rightPan, iceP_tilt, context);
    }

    void _iceI_saccadic3D(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, float, const ::Ice::Context&);

    void saccadic4D(float iceP_leftPan, float iceP_rightPan, float iceP_tilt, float iceP_neck, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic4D, iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto saccadic4DAsync(float iceP_leftPan, float iceP_rightPan, float iceP_tilt, float iceP_neck, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic4D, iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, context);
    }

    ::std::function<void()>
    saccadic4DAsync(float iceP_leftPan, float iceP_rightPan, float iceP_tilt, float iceP_neck,
                    ::std::function<void()> response,
                    ::std::function<void(::std::exception_ptr)> ex = nullptr,
                    ::std::function<void(bool)> sent = nullptr,
                    const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_saccadic4D, iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, context);
    }

    void _iceI_saccadic4D(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, float, float, float, float, const ::Ice::Context&);

    void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setNMotorsPosition, iceP_listGoals, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setNMotorsPositionAsync(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setNMotorsPosition, iceP_listGoals, context);
    }

    ::std::function<void()>
    setNMotorsPositionAsync(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals,
                            ::std::function<void()> response,
                            ::std::function<void(::std::exception_ptr)> ex = nullptr,
                            ::std::function<void(bool)> sent = nullptr,
                            const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_setNMotorsPosition, iceP_listGoals, context);
    }

    void _iceI_setNMotorsPosition(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context&);

    ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCommonHead::THeadParams>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHeadParamsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCommonHead::THeadParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCommonHead::THeadParams, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadParams, context);
    }

    ::std::function<void()>
    getHeadParamsAsync(::std::function<void(::RoboCompCommonHead::THeadParams)> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCommonHead::THeadParams>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadParams, context);
    }

    void _iceI_getHeadParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCommonHead::THeadParams>>&, const ::Ice::Context&);

    void getHeadState(::RoboCompCommonHead::THeadState& iceP_hState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        iceP_hState = _makePromiseOutgoing<::RoboCompCommonHead::THeadState>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadState, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getHeadStateAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCommonHead::THeadState>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCommonHead::THeadState, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadState, context);
    }

    ::std::function<void()>
    getHeadStateAsync(::std::function<void(::RoboCompCommonHead::THeadState)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCommonHead::THeadState>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_getHeadState, context);
    }

    void _iceI_getHeadState(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCommonHead::THeadState>>&, const ::Ice::Context&);

    bool isMovingHead(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<bool>(true, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_isMovingHead, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto isMovingHeadAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<bool>>().get_future())
    {
        return _makePromiseOutgoing<bool, P>(false, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_isMovingHead, context);
    }

    ::std::function<void()>
    isMovingHeadAsync(::std::function<void(bool)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<bool>(response, ex, sent, this, &RoboCompCommonHead::CommonHeadPrx::_iceI_isMovingHead, context);
    }

    void _iceI_isMovingHead(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<bool>>&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    CommonHeadPrx() = default;
    friend ::std::shared_ptr<CommonHeadPrx> IceInternal::createProxy<CommonHeadPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<>
struct StreamableTraits<::RoboCompCommonHead::THeadParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCommonHead::THeadParams, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadParams& v)
    {
        istr->readAll(v.motorsParams, v.model);
    }
};

template<>
struct StreamableTraits<::RoboCompCommonHead::THeadState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCommonHead::THeadState, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadState& v)
    {
        istr->readAll(v.motorsState, v.isMoving);
    }
};

}

namespace RoboCompCommonHead
{

using CommonHeadPtr = ::std::shared_ptr<CommonHead>;
using CommonHeadPrxPtr = ::std::shared_ptr<CommonHeadPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompCommonHead
{

class CommonHead;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompCommonHead::CommonHead*);

}

}

namespace RoboCompCommonHead
{

class CommonHead;
::Ice::Object* upCast(::RoboCompCommonHead::CommonHead*);
typedef ::IceInternal::Handle< ::RoboCompCommonHead::CommonHead> CommonHeadPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCommonHead::CommonHead> CommonHeadPrx;
typedef CommonHeadPrx CommonHeadPrxPtr;
void _icePatchObjectPtr(CommonHeadPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompCommonHead
{

typedef ::std::map< ::std::string, ::RoboCompJointMotor::MotorParams> dmotorParams;

struct THeadParams
{
    ::RoboCompCommonHead::dmotorParams motorsParams;
    ::std::string model;
};

typedef ::std::map< ::std::string, ::RoboCompJointMotor::MotorState> dmotorsState;

struct THeadState
{
    ::RoboCompCommonHead::dmotorsState motorsState;
    bool isMoving;
};

}

namespace RoboCompCommonHead
{

class Callback_CommonHead_resetHead_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_resetHead_Base> Callback_CommonHead_resetHeadPtr;

class Callback_CommonHead_stopHead_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_stopHead_Base> Callback_CommonHead_stopHeadPtr;

class Callback_CommonHead_setPanLeft_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setPanLeft_Base> Callback_CommonHead_setPanLeftPtr;

class Callback_CommonHead_setPanRight_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setPanRight_Base> Callback_CommonHead_setPanRightPtr;

class Callback_CommonHead_setTilt_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setTilt_Base> Callback_CommonHead_setTiltPtr;

class Callback_CommonHead_setNeck_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setNeck_Base> Callback_CommonHead_setNeckPtr;

class Callback_CommonHead_saccadic2DLeft_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic2DLeft_Base> Callback_CommonHead_saccadic2DLeftPtr;

class Callback_CommonHead_saccadic2DRight_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic2DRight_Base> Callback_CommonHead_saccadic2DRightPtr;

class Callback_CommonHead_saccadic3D_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic3D_Base> Callback_CommonHead_saccadic3DPtr;

class Callback_CommonHead_saccadic4D_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_saccadic4D_Base> Callback_CommonHead_saccadic4DPtr;

class Callback_CommonHead_setNMotorsPosition_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_setNMotorsPosition_Base> Callback_CommonHead_setNMotorsPositionPtr;

class Callback_CommonHead_getHeadParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_getHeadParams_Base> Callback_CommonHead_getHeadParamsPtr;

class Callback_CommonHead_getHeadState_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_getHeadState_Base> Callback_CommonHead_getHeadStatePtr;

class Callback_CommonHead_isMovingHead_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_CommonHead_isMovingHead_Base> Callback_CommonHead_isMovingHeadPtr;

}

namespace IceProxy
{

namespace RoboCompCommonHead
{

class CommonHead : public virtual ::Ice::Proxy<CommonHead, ::IceProxy::Ice::Object>
{
public:

    void resetHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_resetHead(_iceI_begin_resetHead(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_resetHead(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::RoboCompCommonHead::Callback_CommonHead_resetHeadPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_resetHead(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_resetHeadPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_resetHead(context, del, cookie);
    }

    void end_resetHead(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_resetHead(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void stopHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_stopHead(_iceI_begin_stopHead(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_stopHead(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::RoboCompCommonHead::Callback_CommonHead_stopHeadPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_stopHead(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_stopHeadPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_stopHead(context, del, cookie);
    }

    void end_stopHead(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_stopHead(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setPanLeft(::Ice::Float iceP_pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPanLeft(_iceI_begin_setPanLeft(iceP_pan, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float iceP_pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPanLeft(iceP_pan, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float iceP_pan, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(iceP_pan, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float iceP_pan, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(iceP_pan, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float iceP_pan, const ::RoboCompCommonHead::Callback_CommonHead_setPanLeftPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(iceP_pan, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanLeft(::Ice::Float iceP_pan, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setPanLeftPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanLeft(iceP_pan, context, del, cookie);
    }

    void end_setPanLeft(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPanLeft(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setPanRight(::Ice::Float iceP_pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setPanRight(_iceI_begin_setPanRight(iceP_pan, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float iceP_pan, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setPanRight(iceP_pan, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float iceP_pan, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(iceP_pan, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float iceP_pan, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(iceP_pan, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float iceP_pan, const ::RoboCompCommonHead::Callback_CommonHead_setPanRightPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(iceP_pan, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setPanRight(::Ice::Float iceP_pan, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setPanRightPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setPanRight(iceP_pan, context, del, cookie);
    }

    void end_setPanRight(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setPanRight(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setTilt(::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setTilt(_iceI_begin_setTilt(iceP_tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setTilt(iceP_tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float iceP_tilt, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(iceP_tilt, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float iceP_tilt, const ::RoboCompCommonHead::Callback_CommonHead_setTiltPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setTilt(::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setTiltPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setTilt(iceP_tilt, context, del, cookie);
    }

    void end_setTilt(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setTilt(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setNeck(::Ice::Float iceP_neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setNeck(_iceI_begin_setNeck(iceP_neck, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float iceP_neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setNeck(iceP_neck, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float iceP_neck, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(iceP_neck, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float iceP_neck, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(iceP_neck, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float iceP_neck, const ::RoboCompCommonHead::Callback_CommonHead_setNeckPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(iceP_neck, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNeck(::Ice::Float iceP_neck, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setNeckPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNeck(iceP_neck, context, del, cookie);
    }

    void end_setNeck(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setNeck(::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic2DLeft(::Ice::Float iceP_leftPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic2DLeft(_iceI_begin_saccadic2DLeft(iceP_leftPan, iceP_tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float iceP_leftPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic2DLeft(iceP_leftPan, iceP_tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float iceP_leftPan, ::Ice::Float iceP_tilt, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(iceP_leftPan, iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float iceP_leftPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(iceP_leftPan, iceP_tilt, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float iceP_leftPan, ::Ice::Float iceP_tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DLeftPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(iceP_leftPan, iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DLeft(::Ice::Float iceP_leftPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DLeftPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DLeft(iceP_leftPan, iceP_tilt, context, del, cookie);
    }

    void end_saccadic2DLeft(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic2DLeft(::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic2DRight(::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic2DRight(_iceI_begin_saccadic2DRight(iceP_rightPan, iceP_tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic2DRight(iceP_rightPan, iceP_tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(iceP_rightPan, iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(iceP_rightPan, iceP_tilt, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DRightPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(iceP_rightPan, iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic2DRight(::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic2DRightPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic2DRight(iceP_rightPan, iceP_tilt, context, del, cookie);
    }

    void end_saccadic2DRight(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic2DRight(::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic3D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic3D(_iceI_begin_saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::RoboCompCommonHead::Callback_CommonHead_saccadic3DPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic3D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic3DPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic3D(iceP_leftPan, iceP_rightPan, iceP_tilt, context, del, cookie);
    }

    void end_saccadic3D(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic3D(::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void saccadic4D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, ::Ice::Float iceP_neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_saccadic4D(_iceI_begin_saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, ::Ice::Float iceP_neck, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, ::Ice::Float iceP_neck, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, ::Ice::Float iceP_neck, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, ::Ice::Float iceP_neck, const ::RoboCompCommonHead::Callback_CommonHead_saccadic4DPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_saccadic4D(::Ice::Float iceP_leftPan, ::Ice::Float iceP_rightPan, ::Ice::Float iceP_tilt, ::Ice::Float iceP_neck, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_saccadic4DPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_saccadic4D(iceP_leftPan, iceP_rightPan, iceP_tilt, iceP_neck, context, del, cookie);
    }

    void end_saccadic4D(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_saccadic4D(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setNMotorsPosition(_iceI_begin_setNMotorsPosition(iceP_listGoals, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setNMotorsPosition(iceP_listGoals, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(iceP_listGoals, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(iceP_listGoals, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::RoboCompCommonHead::Callback_CommonHead_setNMotorsPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(iceP_listGoals, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList& iceP_listGoals, const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_setNMotorsPositionPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setNMotorsPosition(iceP_listGoals, context, del, cookie);
    }

    void end_setNMotorsPosition(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getHeadParams(_iceI_begin_getHeadParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getHeadParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::RoboCompCommonHead::Callback_CommonHead_getHeadParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadParams(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_getHeadParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadParams(context, del, cookie);
    }

    ::RoboCompCommonHead::THeadParams end_getHeadParams(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getHeadParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getHeadState(::RoboCompCommonHead::THeadState& iceP_hState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getHeadState(iceP_hState, _iceI_begin_getHeadState(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getHeadState(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::RoboCompCommonHead::Callback_CommonHead_getHeadStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getHeadState(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_getHeadStatePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getHeadState(context, del, cookie);
    }

    void end_getHeadState(::RoboCompCommonHead::THeadState& iceP_hState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getHeadState(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    bool isMovingHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_isMovingHead(_iceI_begin_isMovingHead(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_isMovingHead(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::RoboCompCommonHead::Callback_CommonHead_isMovingHeadPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_isMovingHead(const ::Ice::Context& context, const ::RoboCompCommonHead::Callback_CommonHead_isMovingHeadPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_isMovingHead(context, del, cookie);
    }

    bool end_isMovingHead(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_isMovingHead(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompCommonHead
{

class CommonHead : public virtual ::Ice::Object
{
public:

    typedef CommonHeadPrx ProxyType;
    typedef CommonHeadPtr PointerType;

    virtual ~CommonHead();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void resetHead(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_resetHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stopHead(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_stopHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPanLeft(::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setPanLeft(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setPanRight(::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setPanRight(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setTilt(::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setTilt(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setNeck(::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setNeck(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic2DLeft(::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_saccadic2DLeft(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic2DRight(::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_saccadic2DRight(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic3D(::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_saccadic3D(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void saccadic4D(::Ice::Float, ::Ice::Float, ::Ice::Float, ::Ice::Float, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_saccadic4D(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setNMotorsPosition(const ::RoboCompJointMotor::MotorGoalPositionList&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setNMotorsPosition(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCommonHead::THeadParams getHeadParams(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getHeadParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getHeadState(::RoboCompCommonHead::THeadState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getHeadState(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isMovingHead(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_isMovingHead(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const CommonHead& lhs, const CommonHead& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const CommonHead& lhs, const CommonHead& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompCommonHead::THeadParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCommonHead::THeadParams, S>
{
    static void write(S* ostr, const ::RoboCompCommonHead::THeadParams& v)
    {
        ostr->write(v.motorsParams);
        ostr->write(v.model);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCommonHead::THeadParams, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadParams& v)
    {
        istr->read(v.motorsParams);
        istr->read(v.model);
    }
};

template<>
struct StreamableTraits< ::RoboCompCommonHead::THeadState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 2;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCommonHead::THeadState, S>
{
    static void write(S* ostr, const ::RoboCompCommonHead::THeadState& v)
    {
        ostr->write(v.motorsState);
        ostr->write(v.isMoving);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCommonHead::THeadState, S>
{
    static void read(S* istr, ::RoboCompCommonHead::THeadState& v)
    {
        istr->read(v.motorsState);
        istr->read(v.isMoving);
    }
};

}

namespace RoboCompCommonHead
{

template<class T>
class CallbackNC_CommonHead_resetHead : public Callback_CommonHead_resetHead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_resetHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_resetHead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_resetHead : public Callback_CommonHead_resetHead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_resetHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_resetHeadPtr
newCallback_CommonHead_resetHead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_resetHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_stopHead : public Callback_CommonHead_stopHead_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_stopHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_stopHead<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_stopHead : public Callback_CommonHead_stopHead_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_stopHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_stopHeadPtr
newCallback_CommonHead_stopHead(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_stopHead<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setPanLeft : public Callback_CommonHead_setPanLeft_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setPanLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanLeft<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setPanLeft : public Callback_CommonHead_setPanLeft_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setPanLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanLeftPtr
newCallback_CommonHead_setPanLeft(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setPanRight : public Callback_CommonHead_setPanRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setPanRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setPanRight<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setPanRight : public Callback_CommonHead_setPanRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setPanRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setPanRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setPanRightPtr
newCallback_CommonHead_setPanRight(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setPanRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setTilt : public Callback_CommonHead_setTilt_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setTilt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setTilt(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setTilt<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setTilt : public Callback_CommonHead_setTilt_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setTilt(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setTilt(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setTiltPtr
newCallback_CommonHead_setTilt(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setTilt<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setNeck : public Callback_CommonHead_setNeck_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setNeck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNeck(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNeck<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setNeck : public Callback_CommonHead_setNeck_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setNeck(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNeck(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNeckPtr
newCallback_CommonHead_setNeck(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNeck<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic2DLeft : public Callback_CommonHead_saccadic2DLeft_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic2DLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DLeft<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic2DLeft : public Callback_CommonHead_saccadic2DLeft_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic2DLeft(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DLeft(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DLeftPtr
newCallback_CommonHead_saccadic2DLeft(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DLeft<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic2DRight : public Callback_CommonHead_saccadic2DRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic2DRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic2DRight<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic2DRight : public Callback_CommonHead_saccadic2DRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic2DRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic2DRight(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic2DRightPtr
newCallback_CommonHead_saccadic2DRight(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic2DRight<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic3D : public Callback_CommonHead_saccadic3D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic3D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic3D<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic3D : public Callback_CommonHead_saccadic3D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic3D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic3D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic3DPtr
newCallback_CommonHead_saccadic3D(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic3D<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_saccadic4D : public Callback_CommonHead_saccadic4D_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_saccadic4D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic4D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_saccadic4D<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_saccadic4D : public Callback_CommonHead_saccadic4D_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_saccadic4D(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_saccadic4D(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_saccadic4DPtr
newCallback_CommonHead_saccadic4D(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_saccadic4D<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_setNMotorsPosition : public Callback_CommonHead_setNMotorsPosition_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_CommonHead_setNMotorsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNMotorsPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)();
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_setNMotorsPosition<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_setNMotorsPosition : public Callback_CommonHead_setNMotorsPosition_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_CommonHead_setNMotorsPosition(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        try
        {
            proxy->end_setNMotorsPosition(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_setNMotorsPositionPtr
newCallback_CommonHead_setNMotorsPosition(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_setNMotorsPosition<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_getHeadParams : public Callback_CommonHead_getHeadParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadParams&);

    CallbackNC_CommonHead_getHeadParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        ::RoboCompCommonHead::THeadParams ret;
        try
        {
            ret = proxy->end_getHeadParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_getHeadParams : public Callback_CommonHead_getHeadParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadParams&, const CT&);

    Callback_CommonHead_getHeadParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        ::RoboCompCommonHead::THeadParams ret;
        try
        {
            ret = proxy->end_getHeadParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_getHeadParamsPtr
newCallback_CommonHead_getHeadParams(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_getHeadState : public Callback_CommonHead_getHeadState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadState&);

    CallbackNC_CommonHead_getHeadState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        ::RoboCompCommonHead::THeadState iceP_hState;
        try
        {
            proxy->end_getHeadState(iceP_hState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_hState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_getHeadState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_getHeadState : public Callback_CommonHead_getHeadState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCommonHead::THeadState&, const CT&);

    Callback_CommonHead_getHeadState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        ::RoboCompCommonHead::THeadState iceP_hState;
        try
        {
            proxy->end_getHeadState(iceP_hState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_hState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_getHeadStatePtr
newCallback_CommonHead_getHeadState(T* instance, void (T::*cb)(const ::RoboCompCommonHead::THeadState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_getHeadState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_CommonHead_isMovingHead : public Callback_CommonHead_isMovingHead_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_CommonHead_isMovingHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_isMovingHead(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_isMovingHead<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_CommonHead_isMovingHead<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_CommonHead_isMovingHead : public Callback_CommonHead_isMovingHead_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_CommonHead_isMovingHead(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCommonHead::CommonHeadPrx proxy = ::RoboCompCommonHead::CommonHeadPrx::uncheckedCast(result->getProxy());
        bool ret;
        try
        {
            ret = proxy->end_isMovingHead(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_isMovingHead<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_CommonHead_isMovingHeadPtr
newCallback_CommonHead_isMovingHead(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_CommonHead_isMovingHead<T, CT>(instance, cb, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
