// **********************************************************************
//
// Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.0
//
// <auto-generated>
//
// Generated from file `Camera.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Camera_h__
#define __Camera_h__

#include <IceUtil/PushDisableWarnings.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/ValueF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Comparable.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/GCObject.h>
#include <Ice/Value.h>
#include <Ice/Incoming.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/Optional.h>
#include <Ice/ExceptionHelpers.h>
#include <CommonHead.h>
#include <GenericBase.h>
#include <IceUtil/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 307
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 0
#       error Ice patch level mismatch!
#   endif
#endif

#ifdef ICE_CPP11_MAPPING // C++11 mapping

namespace RoboCompCamera
{

class Camera;
class CameraPrx;

}

namespace RoboCompCamera
{

class HardwareFailedException : public ::Ice::UserExceptionHelper<HardwareFailedException, ::Ice::UserException>
{
public:

    virtual ~HardwareFailedException();

    HardwareFailedException(const HardwareFailedException&) = default;

    HardwareFailedException() = default;

    HardwareFailedException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

static HardwareFailedException _iceS_HardwareFailedException_init;

class MovingImageException : public ::Ice::UserExceptionHelper<MovingImageException, ::Ice::UserException>
{
public:

    virtual ~MovingImageException();

    MovingImageException(const MovingImageException&) = default;

    MovingImageException() = default;

    MovingImageException(const ::std::string& iceP_what) :
        what(::std::move(iceP_what))
    {
    }

    std::tuple<const ::std::string&> ice_tuple() const
    {
        return std::tie(what);
    }

    static const ::std::string& ice_staticId();

    ::std::string what;
};

using imgType = ::std::vector<::Ice::Byte>;

using intVector = ::std::vector<int>;

struct TCamParams
{
    int focal;
    int width;
    int height;
    int size;
    int numCams;
    int FPS;
    int timerPeriod;
    int leftCamera;
    int rightCamera;
    int bothCameras;
    int inverted;
    int rotated;
    int leftInverted;
    int rightInverted;
    int saturation;
    int lineFreq;
    bool talkToBase;
    bool talkToJointMotor;
    ::std::string name;
    ::std::string driver;
    ::std::string device;
    ::std::string mode;

    std::tuple<const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const int&, const bool&, const bool&, const ::std::string&, const ::std::string&, const ::std::string&, const ::std::string&> ice_tuple() const
    {
        return std::tie(focal, width, height, size, numCams, FPS, timerPeriod, leftCamera, rightCamera, bothCameras, inverted, rotated, leftInverted, rightInverted, saturation, lineFreq, talkToBase, talkToJointMotor, name, driver, device, mode);
    }
};

using Ice::operator<;
using Ice::operator<=;
using Ice::operator>;
using Ice::operator>=;
using Ice::operator==;
using Ice::operator!=;

}

namespace RoboCompCamera
{

class Camera : public virtual ::Ice::Object
{
public:

    using ProxyType = CameraPrx;

    virtual bool ice_isA(::std::string, const ::Ice::Current&) const override;
    virtual ::std::vector<::std::string> ice_ids(const ::Ice::Current&) const override;
    virtual ::std::string ice_id(const ::Ice::Current&) const override;

    static const ::std::string& ice_staticId();

    struct GetYUVImageResult
    {
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getYUVImage(int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getYUVImage(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetYImageResult
    {
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getYImage(int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getYImage(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetYLogPolarImageResult
    {
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getYLogPolarImage(int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getYLogPolarImage(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetYImageCRResult
    {
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getYImageCR(int, int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getYImageCR(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetRGBPackedImageResult
    {
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getRGBPackedImage(int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getRGBPackedImage(::IceInternal::Incoming&, const ::Ice::Current&);

    struct GetYRGBImageResult
    {
        ::RoboCompCamera::imgType roi;
        ::RoboCompCommonHead::THeadState hState;
        ::RoboCompGenericBase::TBaseState bState;
    };

    virtual void getYRGBImage(int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current&) = 0;
    bool _iceD_getYRGBImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCamera::TCamParams getCamParams(const ::Ice::Current&) = 0;
    bool _iceD_getCamParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInnerImage(::RoboCompCamera::imgType, const ::Ice::Current&) = 0;
    bool _iceD_setInnerImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&) override;
};

}

namespace RoboCompCamera
{

class CameraPrx : public virtual ::Ice::Proxy<CameraPrx, ::Ice::ObjectPrx>
{
public:

    void getYUVImage(int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompCamera::Camera::GetYUVImageResult>(true, this, &RoboCompCamera::CameraPrx::_iceI_getYUVImage, iceP_cam, context).get();
        iceP_roi = ::std::move(result.roi);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getYUVImageAsync(int iceP_cam, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera::Camera::GetYUVImageResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera::Camera::GetYUVImageResult, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_getYUVImage, iceP_cam, context);
    }

    ::std::function<void()>
    getYUVImageAsync(int iceP_cam,
                     ::std::function<void(::RoboCompCamera::imgType, ::RoboCompCommonHead::THeadState, ::RoboCompGenericBase::TBaseState)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompCamera::Camera::GetYUVImageResult&& result)
        {
            response(::std::move(result.roi), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompCamera::Camera::GetYUVImageResult>(responseCb, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_getYUVImage, iceP_cam, context);
    }

    void _iceI_getYUVImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera::Camera::GetYUVImageResult>>&, int, const ::Ice::Context&);

    void getYImage(int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompCamera::Camera::GetYImageResult>(true, this, &RoboCompCamera::CameraPrx::_iceI_getYImage, iceP_cam, context).get();
        iceP_roi = ::std::move(result.roi);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getYImageAsync(int iceP_cam, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera::Camera::GetYImageResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera::Camera::GetYImageResult, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_getYImage, iceP_cam, context);
    }

    ::std::function<void()>
    getYImageAsync(int iceP_cam,
                   ::std::function<void(::RoboCompCamera::imgType, ::RoboCompCommonHead::THeadState, ::RoboCompGenericBase::TBaseState)> response,
                   ::std::function<void(::std::exception_ptr)> ex = nullptr,
                   ::std::function<void(bool)> sent = nullptr,
                   const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompCamera::Camera::GetYImageResult&& result)
        {
            response(::std::move(result.roi), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompCamera::Camera::GetYImageResult>(responseCb, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_getYImage, iceP_cam, context);
    }

    void _iceI_getYImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera::Camera::GetYImageResult>>&, int, const ::Ice::Context&);

    void getYLogPolarImage(int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompCamera::Camera::GetYLogPolarImageResult>(true, this, &RoboCompCamera::CameraPrx::_iceI_getYLogPolarImage, iceP_cam, context).get();
        iceP_roi = ::std::move(result.roi);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getYLogPolarImageAsync(int iceP_cam, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera::Camera::GetYLogPolarImageResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera::Camera::GetYLogPolarImageResult, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_getYLogPolarImage, iceP_cam, context);
    }

    ::std::function<void()>
    getYLogPolarImageAsync(int iceP_cam,
                           ::std::function<void(::RoboCompCamera::imgType, ::RoboCompCommonHead::THeadState, ::RoboCompGenericBase::TBaseState)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompCamera::Camera::GetYLogPolarImageResult&& result)
        {
            response(::std::move(result.roi), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompCamera::Camera::GetYLogPolarImageResult>(responseCb, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_getYLogPolarImage, iceP_cam, context);
    }

    void _iceI_getYLogPolarImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera::Camera::GetYLogPolarImageResult>>&, int, const ::Ice::Context&);

    void getYImageCR(int iceP_cam, int iceP_div, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompCamera::Camera::GetYImageCRResult>(true, this, &RoboCompCamera::CameraPrx::_iceI_getYImageCR, iceP_cam, iceP_div, context).get();
        iceP_roi = ::std::move(result.roi);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getYImageCRAsync(int iceP_cam, int iceP_div, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera::Camera::GetYImageCRResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera::Camera::GetYImageCRResult, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_getYImageCR, iceP_cam, iceP_div, context);
    }

    ::std::function<void()>
    getYImageCRAsync(int iceP_cam, int iceP_div,
                     ::std::function<void(::RoboCompCamera::imgType, ::RoboCompCommonHead::THeadState, ::RoboCompGenericBase::TBaseState)> response,
                     ::std::function<void(::std::exception_ptr)> ex = nullptr,
                     ::std::function<void(bool)> sent = nullptr,
                     const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompCamera::Camera::GetYImageCRResult&& result)
        {
            response(::std::move(result.roi), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompCamera::Camera::GetYImageCRResult>(responseCb, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_getYImageCR, iceP_cam, iceP_div, context);
    }

    void _iceI_getYImageCR(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera::Camera::GetYImageCRResult>>&, int, int, const ::Ice::Context&);

    void getRGBPackedImage(int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompCamera::Camera::GetRGBPackedImageResult>(true, this, &RoboCompCamera::CameraPrx::_iceI_getRGBPackedImage, iceP_cam, context).get();
        iceP_roi = ::std::move(result.roi);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getRGBPackedImageAsync(int iceP_cam, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera::Camera::GetRGBPackedImageResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera::Camera::GetRGBPackedImageResult, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_getRGBPackedImage, iceP_cam, context);
    }

    ::std::function<void()>
    getRGBPackedImageAsync(int iceP_cam,
                           ::std::function<void(::RoboCompCamera::imgType, ::RoboCompCommonHead::THeadState, ::RoboCompGenericBase::TBaseState)> response,
                           ::std::function<void(::std::exception_ptr)> ex = nullptr,
                           ::std::function<void(bool)> sent = nullptr,
                           const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompCamera::Camera::GetRGBPackedImageResult&& result)
        {
            response(::std::move(result.roi), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompCamera::Camera::GetRGBPackedImageResult>(responseCb, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_getRGBPackedImage, iceP_cam, context);
    }

    void _iceI_getRGBPackedImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera::Camera::GetRGBPackedImageResult>>&, int, const ::Ice::Context&);

    void getYRGBImage(int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto result = _makePromiseOutgoing<::RoboCompCamera::Camera::GetYRGBImageResult>(true, this, &RoboCompCamera::CameraPrx::_iceI_getYRGBImage, iceP_cam, context).get();
        iceP_roi = ::std::move(result.roi);
        iceP_hState = ::std::move(result.hState);
        iceP_bState = ::std::move(result.bState);
    }

    template<template<typename> class P = ::std::promise>
    auto getYRGBImageAsync(int iceP_cam, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera::Camera::GetYRGBImageResult>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera::Camera::GetYRGBImageResult, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_getYRGBImage, iceP_cam, context);
    }

    ::std::function<void()>
    getYRGBImageAsync(int iceP_cam,
                      ::std::function<void(::RoboCompCamera::imgType, ::RoboCompCommonHead::THeadState, ::RoboCompGenericBase::TBaseState)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        auto responseCb = [response](::RoboCompCamera::Camera::GetYRGBImageResult&& result)
        {
            response(::std::move(result.roi), ::std::move(result.hState), ::std::move(result.bState));
        };
        return _makeLamdaOutgoing<::RoboCompCamera::Camera::GetYRGBImageResult>(responseCb, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_getYRGBImage, iceP_cam, context);
    }

    void _iceI_getYRGBImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera::Camera::GetYRGBImageResult>>&, int, const ::Ice::Context&);

    ::RoboCompCamera::TCamParams getCamParams(const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makePromiseOutgoing<::RoboCompCamera::TCamParams>(true, this, &RoboCompCamera::CameraPrx::_iceI_getCamParams, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto getCamParamsAsync(const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<::RoboCompCamera::TCamParams>>().get_future())
    {
        return _makePromiseOutgoing<::RoboCompCamera::TCamParams, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_getCamParams, context);
    }

    ::std::function<void()>
    getCamParamsAsync(::std::function<void(::RoboCompCamera::TCamParams)> response,
                      ::std::function<void(::std::exception_ptr)> ex = nullptr,
                      ::std::function<void(bool)> sent = nullptr,
                      const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<::RoboCompCamera::TCamParams>(response, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_getCamParams, context);
    }

    void _iceI_getCamParams(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<::RoboCompCamera::TCamParams>>&, const ::Ice::Context&);

    void setInnerImage(const ::RoboCompCamera::imgType& iceP_roi, const ::Ice::Context& context = Ice::noExplicitContext)
    {
        _makePromiseOutgoing<void>(true, this, &RoboCompCamera::CameraPrx::_iceI_setInnerImage, iceP_roi, context).get();
    }

    template<template<typename> class P = ::std::promise>
    auto setInnerImageAsync(const ::RoboCompCamera::imgType& iceP_roi, const ::Ice::Context& context = Ice::noExplicitContext)
        -> decltype(::std::declval<P<void>>().get_future())
    {
        return _makePromiseOutgoing<void, P>(false, this, &RoboCompCamera::CameraPrx::_iceI_setInnerImage, iceP_roi, context);
    }

    ::std::function<void()>
    setInnerImageAsync(const ::RoboCompCamera::imgType& iceP_roi,
                       ::std::function<void()> response,
                       ::std::function<void(::std::exception_ptr)> ex = nullptr,
                       ::std::function<void(bool)> sent = nullptr,
                       const ::Ice::Context& context = Ice::noExplicitContext)
    {
        return _makeLamdaOutgoing<void>(response, ex, sent, this, &RoboCompCamera::CameraPrx::_iceI_setInnerImage, iceP_roi, context);
    }

    void _iceI_setInnerImage(const ::std::shared_ptr<::IceInternal::OutgoingAsyncT<void>>&, const ::RoboCompCamera::imgType&, const ::Ice::Context&);

    static const ::std::string& ice_staticId();

protected:

    CameraPrx() = default;
    friend ::std::shared_ptr<CameraPrx> IceInternal::createProxy<CameraPrx>();

    virtual ::std::shared_ptr<::Ice::ObjectPrx> _newInstance() const override;
};

}

namespace Ice
{

template<typename S>
struct StreamReader<::RoboCompCamera::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompCamera::HardwareFailedException& v)
    {
        istr->readAll(v.what);
    }
};

template<typename S>
struct StreamReader<::RoboCompCamera::MovingImageException, S>
{
    static void read(S* istr, ::RoboCompCamera::MovingImageException& v)
    {
        istr->readAll(v.what);
    }
};

template<>
struct StreamableTraits<::RoboCompCamera::TCamParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 70;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamReader<::RoboCompCamera::TCamParams, S>
{
    static void read(S* istr, ::RoboCompCamera::TCamParams& v)
    {
        istr->readAll(v.focal, v.width, v.height, v.size, v.numCams, v.FPS, v.timerPeriod, v.leftCamera, v.rightCamera, v.bothCameras, v.inverted, v.rotated, v.leftInverted, v.rightInverted, v.saturation, v.lineFreq, v.talkToBase, v.talkToJointMotor, v.name, v.driver, v.device, v.mode);
    }
};

}

namespace RoboCompCamera
{

using CameraPtr = ::std::shared_ptr<Camera>;
using CameraPrxPtr = ::std::shared_ptr<CameraPrx>;

}

#else // C++98 mapping

namespace IceProxy
{

namespace RoboCompCamera
{

class Camera;
void _readProxy(::Ice::InputStream*, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCamera::Camera>&);
::IceProxy::Ice::Object* upCast(::IceProxy::RoboCompCamera::Camera*);

}

}

namespace RoboCompCamera
{

class Camera;
::Ice::Object* upCast(::RoboCompCamera::Camera*);
typedef ::IceInternal::Handle< ::RoboCompCamera::Camera> CameraPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::RoboCompCamera::Camera> CameraPrx;
typedef CameraPrx CameraPrxPtr;
void _icePatchObjectPtr(CameraPtr&, const ::Ice::ObjectPtr&);

}

namespace RoboCompCamera
{

class HardwareFailedException : public ::Ice::UserException
{
public:

    HardwareFailedException() {}
    explicit HardwareFailedException(const ::std::string&);
    virtual ~HardwareFailedException() throw();

    virtual ::std::string ice_id() const;
    virtual HardwareFailedException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

static HardwareFailedException _iceS_HardwareFailedException_init;

class MovingImageException : public ::Ice::UserException
{
public:

    MovingImageException() {}
    explicit MovingImageException(const ::std::string&);
    virtual ~MovingImageException() throw();

    virtual ::std::string ice_id() const;
    virtual MovingImageException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string what;

protected:

    virtual void _writeImpl(::Ice::OutputStream*) const;
    virtual void _readImpl(::Ice::InputStream*);
};

typedef ::std::vector< ::Ice::Byte> imgType;

typedef ::std::vector< ::Ice::Int> intVector;

struct TCamParams
{
    ::Ice::Int focal;
    ::Ice::Int width;
    ::Ice::Int height;
    ::Ice::Int size;
    ::Ice::Int numCams;
    ::Ice::Int FPS;
    ::Ice::Int timerPeriod;
    ::Ice::Int leftCamera;
    ::Ice::Int rightCamera;
    ::Ice::Int bothCameras;
    ::Ice::Int inverted;
    ::Ice::Int rotated;
    ::Ice::Int leftInverted;
    ::Ice::Int rightInverted;
    ::Ice::Int saturation;
    ::Ice::Int lineFreq;
    bool talkToBase;
    bool talkToJointMotor;
    ::std::string name;
    ::std::string driver;
    ::std::string device;
    ::std::string mode;

    bool operator==(const TCamParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return true;
        }
        if(focal != rhs_.focal)
        {
            return false;
        }
        if(width != rhs_.width)
        {
            return false;
        }
        if(height != rhs_.height)
        {
            return false;
        }
        if(size != rhs_.size)
        {
            return false;
        }
        if(numCams != rhs_.numCams)
        {
            return false;
        }
        if(FPS != rhs_.FPS)
        {
            return false;
        }
        if(timerPeriod != rhs_.timerPeriod)
        {
            return false;
        }
        if(leftCamera != rhs_.leftCamera)
        {
            return false;
        }
        if(rightCamera != rhs_.rightCamera)
        {
            return false;
        }
        if(bothCameras != rhs_.bothCameras)
        {
            return false;
        }
        if(inverted != rhs_.inverted)
        {
            return false;
        }
        if(rotated != rhs_.rotated)
        {
            return false;
        }
        if(leftInverted != rhs_.leftInverted)
        {
            return false;
        }
        if(rightInverted != rhs_.rightInverted)
        {
            return false;
        }
        if(saturation != rhs_.saturation)
        {
            return false;
        }
        if(lineFreq != rhs_.lineFreq)
        {
            return false;
        }
        if(talkToBase != rhs_.talkToBase)
        {
            return false;
        }
        if(talkToJointMotor != rhs_.talkToJointMotor)
        {
            return false;
        }
        if(name != rhs_.name)
        {
            return false;
        }
        if(driver != rhs_.driver)
        {
            return false;
        }
        if(device != rhs_.device)
        {
            return false;
        }
        if(mode != rhs_.mode)
        {
            return false;
        }
        return true;
    }

    bool operator<(const TCamParams& rhs_) const
    {
        if(this == &rhs_)
        {
            return false;
        }
        if(focal < rhs_.focal)
        {
            return true;
        }
        else if(rhs_.focal < focal)
        {
            return false;
        }
        if(width < rhs_.width)
        {
            return true;
        }
        else if(rhs_.width < width)
        {
            return false;
        }
        if(height < rhs_.height)
        {
            return true;
        }
        else if(rhs_.height < height)
        {
            return false;
        }
        if(size < rhs_.size)
        {
            return true;
        }
        else if(rhs_.size < size)
        {
            return false;
        }
        if(numCams < rhs_.numCams)
        {
            return true;
        }
        else if(rhs_.numCams < numCams)
        {
            return false;
        }
        if(FPS < rhs_.FPS)
        {
            return true;
        }
        else if(rhs_.FPS < FPS)
        {
            return false;
        }
        if(timerPeriod < rhs_.timerPeriod)
        {
            return true;
        }
        else if(rhs_.timerPeriod < timerPeriod)
        {
            return false;
        }
        if(leftCamera < rhs_.leftCamera)
        {
            return true;
        }
        else if(rhs_.leftCamera < leftCamera)
        {
            return false;
        }
        if(rightCamera < rhs_.rightCamera)
        {
            return true;
        }
        else if(rhs_.rightCamera < rightCamera)
        {
            return false;
        }
        if(bothCameras < rhs_.bothCameras)
        {
            return true;
        }
        else if(rhs_.bothCameras < bothCameras)
        {
            return false;
        }
        if(inverted < rhs_.inverted)
        {
            return true;
        }
        else if(rhs_.inverted < inverted)
        {
            return false;
        }
        if(rotated < rhs_.rotated)
        {
            return true;
        }
        else if(rhs_.rotated < rotated)
        {
            return false;
        }
        if(leftInverted < rhs_.leftInverted)
        {
            return true;
        }
        else if(rhs_.leftInverted < leftInverted)
        {
            return false;
        }
        if(rightInverted < rhs_.rightInverted)
        {
            return true;
        }
        else if(rhs_.rightInverted < rightInverted)
        {
            return false;
        }
        if(saturation < rhs_.saturation)
        {
            return true;
        }
        else if(rhs_.saturation < saturation)
        {
            return false;
        }
        if(lineFreq < rhs_.lineFreq)
        {
            return true;
        }
        else if(rhs_.lineFreq < lineFreq)
        {
            return false;
        }
        if(talkToBase < rhs_.talkToBase)
        {
            return true;
        }
        else if(rhs_.talkToBase < talkToBase)
        {
            return false;
        }
        if(talkToJointMotor < rhs_.talkToJointMotor)
        {
            return true;
        }
        else if(rhs_.talkToJointMotor < talkToJointMotor)
        {
            return false;
        }
        if(name < rhs_.name)
        {
            return true;
        }
        else if(rhs_.name < name)
        {
            return false;
        }
        if(driver < rhs_.driver)
        {
            return true;
        }
        else if(rhs_.driver < driver)
        {
            return false;
        }
        if(device < rhs_.device)
        {
            return true;
        }
        else if(rhs_.device < device)
        {
            return false;
        }
        if(mode < rhs_.mode)
        {
            return true;
        }
        else if(rhs_.mode < mode)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const TCamParams& rhs_) const
    {
        return !operator==(rhs_);
    }
    bool operator<=(const TCamParams& rhs_) const
    {
        return operator<(rhs_) || operator==(rhs_);
    }
    bool operator>(const TCamParams& rhs_) const
    {
        return !operator<(rhs_) && !operator==(rhs_);
    }
    bool operator>=(const TCamParams& rhs_) const
    {
        return !operator<(rhs_);
    }
};

}

namespace RoboCompCamera
{

class Callback_Camera_getYUVImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYUVImage_Base> Callback_Camera_getYUVImagePtr;

class Callback_Camera_getYImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYImage_Base> Callback_Camera_getYImagePtr;

class Callback_Camera_getYLogPolarImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYLogPolarImage_Base> Callback_Camera_getYLogPolarImagePtr;

class Callback_Camera_getYImageCR_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYImageCR_Base> Callback_Camera_getYImageCRPtr;

class Callback_Camera_getRGBPackedImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getRGBPackedImage_Base> Callback_Camera_getRGBPackedImagePtr;

class Callback_Camera_getYRGBImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getYRGBImage_Base> Callback_Camera_getYRGBImagePtr;

class Callback_Camera_getCamParams_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_getCamParams_Base> Callback_Camera_getCamParamsPtr;

class Callback_Camera_setInnerImage_Base : public virtual ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Camera_setInnerImage_Base> Callback_Camera_setInnerImagePtr;

}

namespace IceProxy
{

namespace RoboCompCamera
{

class Camera : public virtual ::Ice::Proxy<Camera, ::IceProxy::Ice::Object>
{
public:

    void getYUVImage(::Ice::Int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getYUVImage(iceP_roi, iceP_hState, iceP_bState, _iceI_begin_getYUVImage(iceP_cam, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int iceP_cam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYUVImage(iceP_cam, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int iceP_cam, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYUVImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYUVImage(iceP_cam, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int iceP_cam, const ::RoboCompCamera::Callback_Camera_getYUVImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYUVImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYUVImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_getYUVImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYUVImage(iceP_cam, context, del, cookie);
    }

    void end_getYUVImage(::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYUVImage(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getYImage(::Ice::Int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getYImage(iceP_roi, iceP_hState, iceP_bState, _iceI_begin_getYImage(iceP_cam, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int iceP_cam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYImage(iceP_cam, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int iceP_cam, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImage(iceP_cam, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int iceP_cam, const ::RoboCompCamera::Callback_Camera_getYImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_getYImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImage(iceP_cam, context, del, cookie);
    }

    void end_getYImage(::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYImage(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getYLogPolarImage(::Ice::Int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getYLogPolarImage(iceP_roi, iceP_hState, iceP_bState, _iceI_begin_getYLogPolarImage(iceP_cam, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int iceP_cam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYLogPolarImage(iceP_cam, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int iceP_cam, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYLogPolarImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYLogPolarImage(iceP_cam, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int iceP_cam, const ::RoboCompCamera::Callback_Camera_getYLogPolarImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYLogPolarImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYLogPolarImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_getYLogPolarImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYLogPolarImage(iceP_cam, context, del, cookie);
    }

    void end_getYLogPolarImage(::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYLogPolarImage(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getYImageCR(::Ice::Int iceP_cam, ::Ice::Int iceP_div, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getYImageCR(iceP_roi, iceP_hState, iceP_bState, _iceI_begin_getYImageCR(iceP_cam, iceP_div, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int iceP_cam, ::Ice::Int iceP_div, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYImageCR(iceP_cam, iceP_div, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int iceP_cam, ::Ice::Int iceP_div, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImageCR(iceP_cam, iceP_div, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int iceP_cam, ::Ice::Int iceP_div, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImageCR(iceP_cam, iceP_div, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int iceP_cam, ::Ice::Int iceP_div, const ::RoboCompCamera::Callback_Camera_getYImageCRPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImageCR(iceP_cam, iceP_div, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYImageCR(::Ice::Int iceP_cam, ::Ice::Int iceP_div, const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_getYImageCRPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYImageCR(iceP_cam, iceP_div, context, del, cookie);
    }

    void end_getYImageCR(::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYImageCR(::Ice::Int, ::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getRGBPackedImage(::Ice::Int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getRGBPackedImage(iceP_roi, iceP_hState, iceP_bState, _iceI_begin_getRGBPackedImage(iceP_cam, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int iceP_cam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getRGBPackedImage(iceP_cam, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int iceP_cam, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBPackedImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBPackedImage(iceP_cam, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int iceP_cam, const ::RoboCompCamera::Callback_Camera_getRGBPackedImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBPackedImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getRGBPackedImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_getRGBPackedImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getRGBPackedImage(iceP_cam, context, del, cookie);
    }

    void end_getRGBPackedImage(::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getRGBPackedImage(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void getYRGBImage(::Ice::Int iceP_cam, ::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_getYRGBImage(iceP_roi, iceP_hState, iceP_bState, _iceI_begin_getYRGBImage(iceP_cam, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int iceP_cam, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getYRGBImage(iceP_cam, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int iceP_cam, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYRGBImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYRGBImage(iceP_cam, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int iceP_cam, const ::RoboCompCamera::Callback_Camera_getYRGBImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYRGBImage(iceP_cam, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getYRGBImage(::Ice::Int iceP_cam, const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_getYRGBImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getYRGBImage(iceP_cam, context, del, cookie);
    }

    void end_getYRGBImage(::RoboCompCamera::imgType& iceP_roi, ::RoboCompCommonHead::THeadState& iceP_hState, ::RoboCompGenericBase::TBaseState& iceP_bState, const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getYRGBImage(::Ice::Int, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    ::RoboCompCamera::TCamParams getCamParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return end_getCamParams(_iceI_begin_getCamParams(context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_getCamParams(context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCamParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCamParams(context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::RoboCompCamera::Callback_Camera_getCamParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCamParams(::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_getCamParams(const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_getCamParamsPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_getCamParams(context, del, cookie);
    }

    ::RoboCompCamera::TCamParams end_getCamParams(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_getCamParams(const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    void setInnerImage(const ::RoboCompCamera::imgType& iceP_roi, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        end_setInnerImage(_iceI_begin_setInnerImage(iceP_roi, context, ::IceInternal::dummyCallback, 0, true));
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& iceP_roi, const ::Ice::Context& context = ::Ice::noExplicitContext)
    {
        return _iceI_begin_setInnerImage(iceP_roi, context, ::IceInternal::dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& iceP_roi, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInnerImage(iceP_roi, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& iceP_roi, const ::Ice::Context& context, const ::Ice::CallbackPtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInnerImage(iceP_roi, context, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& iceP_roi, const ::RoboCompCamera::Callback_Camera_setInnerImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInnerImage(iceP_roi, ::Ice::noExplicitContext, del, cookie);
    }

    ::Ice::AsyncResultPtr begin_setInnerImage(const ::RoboCompCamera::imgType& iceP_roi, const ::Ice::Context& context, const ::RoboCompCamera::Callback_Camera_setInnerImagePtr& del, const ::Ice::LocalObjectPtr& cookie = 0)
    {
        return _iceI_begin_setInnerImage(iceP_roi, context, del, cookie);
    }

    void end_setInnerImage(const ::Ice::AsyncResultPtr&);

private:

    ::Ice::AsyncResultPtr _iceI_begin_setInnerImage(const ::RoboCompCamera::imgType&, const ::Ice::Context&, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& cookie = 0, bool sync = false);

public:

    static const ::std::string& ice_staticId();

protected:

    virtual ::IceProxy::Ice::Object* _newInstance() const;
};

}

}

namespace RoboCompCamera
{

class Camera : public virtual ::Ice::Object
{
public:

    typedef CameraPrx ProxyType;
    typedef CameraPtr PointerType;

    virtual ~Camera();

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::emptyCurrent) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::emptyCurrent) const;

    static const ::std::string& ice_staticId();

    virtual void getYUVImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getYUVImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getYImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYLogPolarImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getYLogPolarImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYImageCR(::Ice::Int, ::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getYImageCR(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getRGBPackedImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getRGBPackedImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void getYRGBImage(::Ice::Int, ::RoboCompCamera::imgType&, ::RoboCompCommonHead::THeadState&, ::RoboCompGenericBase::TBaseState&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getYRGBImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::RoboCompCamera::TCamParams getCamParams(const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_getCamParams(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setInnerImage(const ::RoboCompCamera::imgType&, const ::Ice::Current& = ::Ice::emptyCurrent) = 0;
    bool _iceD_setInnerImage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool _iceDispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:

    virtual void _iceWriteImpl(::Ice::OutputStream*) const;
    virtual void _iceReadImpl(::Ice::InputStream*);
};

inline bool operator==(const Camera& lhs, const Camera& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) == static_cast<const ::Ice::Object&>(rhs);
}

inline bool operator<(const Camera& lhs, const Camera& rhs)
{
    return static_cast<const ::Ice::Object&>(lhs) < static_cast<const ::Ice::Object&>(rhs);
}

}

namespace Ice
{

template<>
struct StreamableTraits< ::RoboCompCamera::HardwareFailedException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompCamera::HardwareFailedException, S>
{
    static void write(S* ostr, const ::RoboCompCamera::HardwareFailedException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCamera::HardwareFailedException, S>
{
    static void read(S* istr, ::RoboCompCamera::HardwareFailedException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompCamera::MovingImageException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<typename S>
struct StreamWriter< ::RoboCompCamera::MovingImageException, S>
{
    static void write(S* ostr, const ::RoboCompCamera::MovingImageException& v)
    {
        ostr->write(v.what);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCamera::MovingImageException, S>
{
    static void read(S* istr, ::RoboCompCamera::MovingImageException& v)
    {
        istr->read(v.what);
    }
};

template<>
struct StreamableTraits< ::RoboCompCamera::TCamParams>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 70;
    static const bool fixedLength = false;
};

template<typename S>
struct StreamWriter< ::RoboCompCamera::TCamParams, S>
{
    static void write(S* ostr, const ::RoboCompCamera::TCamParams& v)
    {
        ostr->write(v.focal);
        ostr->write(v.width);
        ostr->write(v.height);
        ostr->write(v.size);
        ostr->write(v.numCams);
        ostr->write(v.FPS);
        ostr->write(v.timerPeriod);
        ostr->write(v.leftCamera);
        ostr->write(v.rightCamera);
        ostr->write(v.bothCameras);
        ostr->write(v.inverted);
        ostr->write(v.rotated);
        ostr->write(v.leftInverted);
        ostr->write(v.rightInverted);
        ostr->write(v.saturation);
        ostr->write(v.lineFreq);
        ostr->write(v.talkToBase);
        ostr->write(v.talkToJointMotor);
        ostr->write(v.name);
        ostr->write(v.driver);
        ostr->write(v.device);
        ostr->write(v.mode);
    }
};

template<typename S>
struct StreamReader< ::RoboCompCamera::TCamParams, S>
{
    static void read(S* istr, ::RoboCompCamera::TCamParams& v)
    {
        istr->read(v.focal);
        istr->read(v.width);
        istr->read(v.height);
        istr->read(v.size);
        istr->read(v.numCams);
        istr->read(v.FPS);
        istr->read(v.timerPeriod);
        istr->read(v.leftCamera);
        istr->read(v.rightCamera);
        istr->read(v.bothCameras);
        istr->read(v.inverted);
        istr->read(v.rotated);
        istr->read(v.leftInverted);
        istr->read(v.rightInverted);
        istr->read(v.saturation);
        istr->read(v.lineFreq);
        istr->read(v.talkToBase);
        istr->read(v.talkToJointMotor);
        istr->read(v.name);
        istr->read(v.driver);
        istr->read(v.device);
        istr->read(v.mode);
    }
};

}

namespace RoboCompCamera
{

template<class T>
class CallbackNC_Camera_getYUVImage : public Callback_Camera_getYUVImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYUVImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYUVImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYUVImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYUVImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYUVImage : public Callback_Camera_getYUVImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYUVImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYUVImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYUVImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYUVImagePtr
newCallback_Camera_getYUVImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYUVImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYImage : public Callback_Camera_getYImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYImage : public Callback_Camera_getYImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYImagePtr
newCallback_Camera_getYImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYLogPolarImage : public Callback_Camera_getYLogPolarImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYLogPolarImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYLogPolarImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYLogPolarImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYLogPolarImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYLogPolarImage : public Callback_Camera_getYLogPolarImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYLogPolarImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYLogPolarImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYLogPolarImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYLogPolarImagePtr
newCallback_Camera_getYLogPolarImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYLogPolarImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYImageCR : public Callback_Camera_getYImageCR_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYImageCR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYImageCR(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImageCR<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYImageCR<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYImageCR : public Callback_Camera_getYImageCR_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYImageCR(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYImageCR(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImageCR<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYImageCRPtr
newCallback_Camera_getYImageCR(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYImageCR<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getRGBPackedImage : public Callback_Camera_getRGBPackedImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getRGBPackedImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getRGBPackedImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getRGBPackedImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getRGBPackedImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getRGBPackedImage : public Callback_Camera_getRGBPackedImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getRGBPackedImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getRGBPackedImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getRGBPackedImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getRGBPackedImagePtr
newCallback_Camera_getRGBPackedImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getRGBPackedImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getYRGBImage : public Callback_Camera_getYRGBImage_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&);

    CallbackNC_Camera_getYRGBImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYRGBImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYRGBImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getYRGBImage<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getYRGBImage : public Callback_Camera_getYRGBImage_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&);

    Callback_Camera_getYRGBImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::imgType iceP_roi;
        ::RoboCompCommonHead::THeadState iceP_hState;
        ::RoboCompGenericBase::TBaseState iceP_bState;
        try
        {
            proxy->end_getYRGBImage(iceP_roi, iceP_hState, iceP_bState, result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(iceP_roi, iceP_hState, iceP_bState, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYRGBImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getYRGBImagePtr
newCallback_Camera_getYRGBImage(T* instance, void (T::*cb)(const ::RoboCompCamera::imgType&, const ::RoboCompCommonHead::THeadState&, const ::RoboCompGenericBase::TBaseState&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getYRGBImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_getCamParams : public Callback_Camera_getCamParams_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::RoboCompCamera::TCamParams&);

    CallbackNC_Camera_getCamParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::TCamParams ret;
        try
        {
            ret = proxy->end_getCamParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::CallbackNC<T>::_callback.get()->*_response)(ret);
        }
    }

private:

    Response _response;
};

template<class T> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCamParams<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(T* instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_getCamParams<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_getCamParams : public Callback_Camera_getCamParams_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::RoboCompCamera::TCamParams&, const CT&);

    Callback_Camera_getCamParams(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), _response(cb)
    {
    }

    virtual void completed(const ::Ice::AsyncResultPtr& result) const
    {
        ::RoboCompCamera::CameraPrx proxy = ::RoboCompCamera::CameraPrx::uncheckedCast(result->getProxy());
        ::RoboCompCamera::TCamParams ret;
        try
        {
            ret = proxy->end_getCamParams(result);
        }
        catch(const ::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::exception(result, ex);
            return;
        }
        if(_response)
        {
            (::IceInternal::Callback<T, CT>::_callback.get()->*_response)(ret, CT::dynamicCast(result->getCookie()));
        }
    }

private:

    Response _response;
};

template<class T, typename CT> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCamParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_getCamParamsPtr
newCallback_Camera_getCamParams(T* instance, void (T::*cb)(const ::RoboCompCamera::TCamParams&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_getCamParams<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Camera_setInnerImage : public Callback_Camera_setInnerImage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Camera_setInnerImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Camera_setInnerImage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Camera_setInnerImage : public Callback_Camera_setInnerImage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Camera_setInnerImage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Camera_setInnerImagePtr
newCallback_Camera_setInnerImage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Camera_setInnerImage<T, CT>(instance, 0, excb, sentcb);
}

}

#endif

#include <IceUtil/PopDisableWarnings.h>
#endif
